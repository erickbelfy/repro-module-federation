{"version":3,"file":"authentication-ui/assets/chunk.250.66a4a109cf6981c7964e.js","mappings":"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","sources":["webpack://authentication-ui/./node_modules/@remix-run/router/dist/router.js","webpack://authentication-ui/./node_modules/react-router/dist/index.js"],"sourcesContent":["/**\n * @remix-run/router v1.5.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nvar Action;\n\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\n\nconst PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\n\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n\n  function getCurrentLocation() {\n    return entries[index];\n  }\n\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n\n  function createHref(to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history = {\n    get index() {\n      return index;\n    },\n\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getCurrentLocation();\n    },\n\n    createHref,\n\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n\n    encodeLocation(to) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 1\n        });\n      }\n    },\n\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 0\n        });\n      }\n    },\n\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n\n      if (listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta\n        });\n      }\n    },\n\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\n\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createBrowserLocation(window, globalHistory) {\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\n\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createHashLocation(window, globalHistory) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location, to) {\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\n\n\nfunction getHistoryState(location, index) {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\n\n\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n\n  let location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\n\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\n\nfunction parsePath(path) {\n  let parsedPath = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n  let index = getIndex(); // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState(_extends({}, globalHistory.state, {\n      idx: index\n    }), \"\");\n  }\n\n  function getIndex() {\n    let state = globalHistory.state || {\n      idx: null\n    };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n\n    if (listener) {\n      listener({\n        action,\n        location: history.location,\n        delta\n      });\n    }\n  }\n\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location); // try...catch because iOS limits us to 100 pushState calls :/\n\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 1\n      });\n    }\n  }\n\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 0\n      });\n    }\n  }\n\n  function createURL(to) {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base = window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n    let href = typeof to === \"string\" ? to : createPath(to);\n    invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n    return new URL(href, base);\n  }\n\n  let history = {\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n\n    createHref(to) {\n      return createHref(window, to);\n    },\n\n    createURL,\n\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n\n    push,\n    replace,\n\n    go(n) {\n      return globalHistory.go(n);\n    }\n\n  };\n  return history;\n} //#endregion\n\nvar ResultType;\n\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\n\nconst immutableRouteKeys = new Set([\"lazy\", \"caseSensitive\", \"path\", \"id\", \"index\", \"children\"]);\n\nfunction isIndexRoute(route) {\n  return route.index === true;\n} // Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\n\n\nfunction convertRoutesToDataRoutes(routes, detectErrorBoundary, parentPath, manifest) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n\n  if (manifest === void 0) {\n    manifest = {};\n  }\n\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!manifest[id], \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n\n    if (isIndexRoute(route)) {\n      let indexRoute = _extends({}, route, {\n        hasErrorBoundary: detectErrorBoundary(route),\n        id\n      });\n\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute = _extends({}, route, {\n        id,\n        hasErrorBoundary: detectErrorBoundary(route),\n        children: undefined\n      });\n\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(route.children, detectErrorBoundary, treePath, manifest);\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\n\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i], // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    safelyDecodeURI(pathname));\n  }\n\n  return matches;\n}\n\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n\n  let flattenRoute = (route, index, relativePath) => {\n    let meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n\n    if (route.children && route.children.length > 0) {\n      invariant( // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    } // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n\n\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  };\n\n  routes.forEach((route, index) => {\n    var _route$path;\n\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\n\n\nfunction explodeOptionalSegments(path) {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n  let [first, ...rest] = segments; // Optional path segments are denoted by a trailing `?`\n\n  let isOptional = first.endsWith(\"?\"); // Compute the corresponding required segment: `foo?` -> `foo`\n\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  let result = []; // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explodes _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n\n  result.push(...restExploded.map(subpath => subpath === \"\" ? required : [required, subpath].join(\"/\"))); // Then if this is an optional value, add all child versions without\n\n  if (isOptional) {\n    result.push(...restExploded);\n  } // for absolute paths, ensure `/` instead of empty segment\n\n\n  return result.map(exploded => path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded);\n}\n\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\n\nconst isSplat = s => s === \"*\";\n\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\n\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ? // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\n\nfunction matchRouteBranch(branch, pathname) {\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    let route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\n\n\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  let path = originalPath;\n\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  } // ensure `/` is added at the beginning if the path is absolute\n\n\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n  const segments = path.split(/\\/+/).map((segment, index, array) => {\n    const isLastSegment = index === array.length - 1; // only apply the splat if it's the last segment\n\n    if (isLastSegment && segment === \"*\") {\n      const star = \"*\";\n      const starParam = params[star]; // Apply the splat\n\n      return starParam;\n    }\n\n    const keyMatch = segment.match(/^:(\\w+)(\\??)$/);\n\n    if (keyMatch) {\n      const [, key, optional] = keyMatch;\n      let param = params[key];\n\n      if (optional === \"?\") {\n        return param == null ? \"\" : param;\n      }\n\n      if (param == null) {\n        invariant(false, \"Missing \\\":\" + key + \"\\\" param\");\n      }\n\n      return param;\n    } // Remove any optional markers from optional static segments\n\n\n    return segment.replace(/\\?$/g, \"\");\n  }) // Remove empty segments\n  .filter(segment => !!segment);\n  return prefix + segments.join(\"/\");\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\n\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n\n  let [matcher, paramNames] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = paramNames.reduce((memo, paramName, index) => {\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\n\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n\n  if (end === void 0) {\n    end = true;\n  }\n\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  let paramNames = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:(\\w+)/g, (_, paramName) => {\n    paramNames.push(paramName);\n    return \"/([^\\\\/]+)\";\n  });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\n\n\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  } // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n\n\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\n\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\n\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\n\n\nfunction getPathContributingMatches(matches) {\n  return matches.filter((match, index) => index === 0 || match.route.path && match.route.path.length > 0);\n}\n/**\n * @private\n */\n\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n\n  let to;\n\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from; // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\"); // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    } // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original \"to\" had one\n\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\"); // Or if this was a link to the current path which has a trailing slash\n\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n/**\n * @private\n */\n\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\n\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n/**\n * @private\n */\n\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n/**\n * @private\n */\n\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n/**\n * @private\n */\n\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\n\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\nclass AbortedDeferredError extends Error {}\nclass DeferredData {\n  constructor(data, responseInit) {\n    this.pendingKeysSet = new Set();\n    this.subscribers = new Set();\n    this.deferredKeys = [];\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\"); // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n\n    let onAbort = () => reject(new AbortedDeferredError(\"Deferred data aborted\"));\n\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener(\"abort\", onAbort);\n\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref) => {\n      let [key, value] = _ref;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key); // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, null, data), error => this.onSettle(promise, key, error)); // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n\n    promise.catch(() => {});\n    Object.defineProperty(promise, \"_tracked\", {\n      get: () => true\n    });\n    return promise;\n  }\n\n  onSettle(promise, key, error, data) {\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    if (error) {\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", {\n      get: () => data\n    });\n    this.emit(false, key);\n    return data;\n  }\n\n  emit(aborted, settledKey) {\n    this.subscribers.forEach(subscriber => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal) {\n    let aborted = false;\n\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise(resolve => {\n        this.subscribe(aborted => {\n          signal.removeEventListener(\"abort\", onAbort);\n\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n    return Object.entries(this.data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n\n}\n\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\n\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n\n  return value._data;\n}\n\nconst defer = function defer(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  return new DeferredData(data, responseInit);\n};\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\n\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n\n  let responseInit = init;\n\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\n\nclass ErrorResponse {\n  constructor(status, statusText, data, internal) {\n    if (internal === void 0) {\n      internal = false;\n    }\n\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\n\nfunction isRouteErrorResponse(error) {\n  return error != null && typeof error.status === \"number\" && typeof error.statusText === \"string\" && typeof error.internal === \"boolean\" && \"data\" in error;\n}\n\nconst validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nconst validMutationMethods = new Set(validMutationMethodsArr);\nconst validRequestMethodsArr = [\"get\", ...validMutationMethodsArr];\nconst validRequestMethods = new Set(validRequestMethodsArr);\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nconst IDLE_BLOCKER = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined\n};\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\nconst isBrowser = typeof window !== \"undefined\" && typeof window.document !== \"undefined\" && typeof window.document.createElement !== \"undefined\";\nconst isServer = !isBrowser;\n\nconst defaultDetectErrorBoundary = route => Boolean(route.hasErrorBoundary); //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\n\n\nfunction createRouter(init) {\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  let detectErrorBoundary = init.detectErrorBoundary || defaultDetectErrorBoundary; // Routes keyed by ID\n\n  let manifest = {}; // Routes in tree format for matching\n\n  let dataRoutes = convertRoutesToDataRoutes(init.routes, detectErrorBoundary, undefined, manifest);\n  let inFlightDataRoutes; // Config driven behavior flags\n\n  let future = _extends({\n    v7_normalizeFormMethod: false\n  }, init.future); // Cleanup function for history\n\n\n  let unlistenHistory = null; // Externally-provided functions to call on all state changes\n\n  let subscribers = new Set(); // Externally-provided object to hold scroll restoration locations during routing\n\n  let savedScrollPositions = null; // Externally-provided function to get scroll restoration keys\n\n  let getScrollRestorationKey = null; // Externally-provided function to get current scroll position\n\n  let getScrollPosition = null; // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n\n  let initialScrollRestored = init.hydrationData != null;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, init.basename);\n  let initialErrors = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  }\n\n  let initialized = // All initialMatches need to be loaded before we're ready.  If we have lazy\n  // functions around still then we'll need to run them in initialize()\n  !initialMatches.some(m => m.route.lazy) && ( // And we have to either have no loaders or have been provided hydrationData\n  !initialMatches.some(m => m.route.loader) || init.hydrationData != null);\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map()\n  }; // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n\n  let pendingAction = Action.Pop; // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n\n  let pendingPreventScrollReset = false; // AbortController for the active navigation\n\n  let pendingNavigationController; // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n\n  let isUninterruptedRevalidation = false; // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n\n  let isRevalidationRequired = false; // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n\n  let cancelledDeferredRoutes = []; // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n\n  let cancelledFetcherLoads = []; // AbortControllers for any in-flight fetchers\n\n  let fetchControllers = new Map(); // Track loads based on the order in which they started\n\n  let incrementingLoadId = 0; // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n\n  let pendingNavigationLoadId = -1; // Fetchers that triggered data reloads as a result of their actions\n\n  let fetchReloadIds = new Map(); // Fetchers that triggered redirect navigations from their actions\n\n  let fetchRedirectIds = new Set(); // Most recent href/match for fetcher.load calls for fetchers\n\n  let fetchLoadMatches = new Map(); // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n\n  let activeDeferreds = new Map(); // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n\n  let blockerFunctions = new Map(); // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n\n  let ignoreNextHistoryUpdate = false; // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location,\n        delta\n      } = _ref;\n\n      // Ignore this event if it was just us resetting the URL from a\n      // blocked POP navigation\n      if (ignoreNextHistoryUpdate) {\n        ignoreNextHistoryUpdate = false;\n        return;\n      }\n\n      warning(blockerFunctions.size === 0 || delta != null, \"You are trying to use a blocker on a POP navigation to a location \" + \"that was not created by @remix-run/router. This will fail silently in \" + \"production. This can happen if you are navigating outside the router \" + \"via `window.history.pushState`/`window.location.hash` instead of using \" + \"router navigation APIs.  This can also happen if you are using \" + \"createHashRouter and the user manually changes the URL.\");\n      let blockerKey = shouldBlockNavigation({\n        currentLocation: state.location,\n        nextLocation: location,\n        historyAction\n      });\n\n      if (blockerKey && delta != null) {\n        // Restore the URL to match the current UI, but don't update router state\n        ignoreNextHistoryUpdate = true;\n        init.history.go(delta * -1); // Put the blocker into a blocked state\n\n        updateBlocker(blockerKey, {\n          state: \"blocked\",\n          location,\n\n          proceed() {\n            updateBlocker(blockerKey, {\n              state: \"proceeding\",\n              proceed: undefined,\n              reset: undefined,\n              location\n            }); // Re-do the same POP navigation we just blocked\n\n            init.history.go(delta);\n          },\n\n          reset() {\n            deleteBlocker(blockerKey);\n            updateState({\n              blockers: new Map(router.state.blockers)\n            });\n          }\n\n        });\n        return;\n      }\n\n      return startNavigation(historyAction, location);\n    }); // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location);\n    }\n\n    return router;\n  } // Clean up a router and it's side effects\n\n\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  } // Subscribe to state updates for the router\n\n\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  } // Update our state and notify the calling context of the change\n\n\n  function updateState(newState) {\n    state = _extends({}, state, newState);\n    subscribers.forEach(subscriber => subscriber(state));\n  } // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n\n\n  function completeNavigation(location, newState) {\n    var _location$state, _location$state2;\n\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    let actionData;\n\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    } // Always preserve any existing loaderData from re-used routes\n\n\n    let loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData; // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n\n    for (let [key] of blockerFunctions) {\n      deleteBlocker(key);\n    } // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n\n\n    let preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;\n\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    updateState(_extends({}, newState, {\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset,\n      blockers: new Map(state.blockers)\n    }));\n\n    if (isUninterruptedRevalidation) ; else if (pendingAction === Action.Pop) ; else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    } // Reset stateful navigation vars\n\n\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  } // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n\n\n  async function navigate(to, opts) {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(to, future, opts);\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state); // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n\n    nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n    let historyAction = Action.Push;\n\n    if (userReplace === true) {\n      historyAction = Action.Replace;\n    } else if (userReplace === false) ; else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = Action.Replace;\n    }\n\n    let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction\n    });\n\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n\n        proceed() {\n          updateBlocker(blockerKey, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation\n          }); // Send the same navigation through\n\n          navigate(to, opts);\n        },\n\n        reset() {\n          deleteBlocker(blockerKey);\n          updateState({\n            blockers: new Map(state.blockers)\n          });\n        }\n\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace\n    });\n  } // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n\n\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    }); // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n\n    if (state.navigation.state === \"submitting\") {\n      return;\n    } // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n\n\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    } // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n\n\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  } // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n\n\n  async function startNavigation(historyAction, location, opts) {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true; // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, init.basename); // Short circuit with a 404 on the root error boundary if we match nothing\n\n    if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(routesToUse); // Cancel all pending deferred on 404s since we don't keep any routes\n\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      });\n      return;\n    } // Short circuit if it's only a hash change and not a mutation submission\n    // For example, on /page#hash and submit a <Form method=\"post\"> which will\n    // default to a navigation to /page\n\n\n    if (isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {\n      completeNavigation(location, {\n        matches\n      });\n      return;\n    } // Create a controller/Request for this navigation\n\n\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);\n    let pendingActionData;\n    let pendingError;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError\n      };\n    } else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(request, location, opts.submission, matches, {\n        replace: opts.replace\n      });\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation = _extends({\n        state: \"loading\",\n        location\n      }, opts.submission);\n\n      loadingNavigation = navigation; // Create a GET request for the loaders\n\n      request = new Request(request.url, {\n        signal: request.signal\n      });\n    } // Call loaders\n\n\n    let {\n      shortCircuited,\n      loaderData,\n      errors\n    } = await handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.fetcherSubmission, opts && opts.replace, pendingActionData, pendingError);\n\n    if (shortCircuited) {\n      return;\n    } // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n\n\n    pendingNavigationController = null;\n    completeNavigation(location, _extends({\n      matches\n    }, pendingActionData ? {\n      actionData: pendingActionData\n    } : {}, {\n      loaderData,\n      errors\n    }));\n  } // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n\n\n  async function handleAction(request, location, submission, matches, opts) {\n    interruptActiveLoads(); // Put us in a submitting state\n\n    let navigation = _extends({\n      state: \"submitting\",\n      location\n    }, submission);\n\n    updateState({\n      navigation\n    }); // Call our action and get the result\n\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id\n        })\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, detectErrorBoundary, router.basename);\n\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace;\n\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace = result.location === state.location.pathname + state.location.search;\n      }\n\n      await startRedirectNavigation(state, result, {\n        submission,\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id); // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n\n      if ((opts && opts.replace) !== true) {\n        pendingAction = Action.Push;\n      }\n\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: {\n          [boundaryMatch.route.id]: result.error\n        }\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n\n    return {\n      pendingActionData: {\n        [actionMatch.route.id]: result.data\n      }\n    };\n  } // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n\n\n  async function handleLoaders(request, location, matches, overrideNavigation, submission, fetcherSubmission, replace, pendingActionData, pendingError) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n\n    if (!loadingNavigation) {\n      let navigation = _extends({\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      }, submission);\n\n      loadingNavigation = navigation;\n    } // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n\n\n    let activeSubmission = submission || fetcherSubmission ? submission || fetcherSubmission : loadingNavigation.formMethod && loadingNavigation.formAction && loadingNavigation.formData && loadingNavigation.formEncType ? {\n      formMethod: loadingNavigation.formMethod,\n      formAction: loadingNavigation.formAction,\n      formData: loadingNavigation.formData,\n      formEncType: loadingNavigation.formEncType\n    } : undefined;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, activeSubmission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, routesToUse, init.basename, pendingActionData, pendingError); // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n\n    cancelActiveDeferreds(routeId => !(matches && matches.some(m => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some(m => m.route.id === routeId)); // Short circuit if we have no loaders to run\n\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(location, _extends({\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null\n      }, pendingActionData ? {\n        actionData: pendingActionData\n      } : {}));\n      return {\n        shortCircuited: true\n      };\n    } // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n\n\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(rf => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true\n        };\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState(_extends({\n        navigation: loadingNavigation\n      }, actionData ? Object.keys(actionData).length === 0 ? {\n        actionData: null\n      } : {\n        actionData\n      } : {}, revalidatingFetchers.length > 0 ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach(rf => fetchControllers.set(rf.key, pendingNavigationController));\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);\n\n    if (request.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    } // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n\n\n    revalidatingFetchers.forEach(rf => fetchControllers.delete(rf.key)); // If any loaders returned a redirect Response, start a new REPLACE navigation\n\n    let redirect = findRedirect(results);\n\n    if (redirect) {\n      await startRedirectNavigation(state, redirect, {\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    } // Process and commit output from loaders\n\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds); // Wire up subscribers to update loaderData as promises settle\n\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe(aborted => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    return _extends({\n      loaderData,\n      errors\n    }, didAbortFetchLoads || revalidatingFetchers.length > 0 ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  }\n\n  function getFetcher(key) {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  } // Trigger a fetcher load/submit for the given fetcher key\n\n\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches = matchRoutes(routesToUse, href, init.basename);\n\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: href\n      }));\n      return;\n    }\n\n    let {\n      path,\n      submission\n    } = normalizeNavigateOptions(href, future, opts, true);\n    let match = getTargetMatch(matches, path);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    } // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n\n\n    fetchLoadMatches.set(key, {\n      routeId,\n      path\n    });\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  } // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n\n\n  async function handleFetcherAction(key, routeId, path, match, requestMatches, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action && !match.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId\n      });\n      setFetcherError(key, routeId, error);\n      return;\n    } // Put this fetcher into it's submitting state\n\n\n    let existingFetcher = state.fetchers.get(key);\n\n    let fetcher = _extends({\n      state: \"submitting\"\n    }, submission, {\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true\n    });\n\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }); // Call the action for the fetcher\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);\n    fetchControllers.set(key, abortController);\n    let actionResult = await callLoaderOrAction(\"action\", fetchRequest, match, requestMatches, manifest, detectErrorBoundary, router.basename);\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n\n      let loadingFetcher = _extends({\n        state: \"loading\"\n      }, submission, {\n        data: undefined,\n        \" _hasFetcherDoneAnything \": true\n      });\n\n      state.fetchers.set(key, loadingFetcher);\n      updateState({\n        fetchers: new Map(state.fetchers)\n      });\n      return startRedirectNavigation(state, actionResult, {\n        submission,\n        isFetchActionRedirect: true\n      });\n    } // Process any non-redirect errors thrown\n\n\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    } // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n\n\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(routesToUse, state.navigation.location, init.basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher = _extends({\n      state: \"loading\",\n      data: actionResult.data\n    }, submission, {\n      \" _hasFetcherDoneAnything \": true\n    });\n\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, submission, nextLocation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, routesToUse, init.basename, {\n      [match.route.id]: actionResult.data\n    }, undefined // No need to send through errors since we short circuit above\n    ); // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n\n    revalidatingFetchers.filter(rf => rf.key !== key).forEach(rf => {\n      let staleKey = rf.key;\n      let existingFetcher = state.fetchers.get(staleKey);\n      let revalidatingFetcher = {\n        state: \"loading\",\n        data: existingFetcher && existingFetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true\n      };\n      state.fetchers.set(staleKey, revalidatingFetcher);\n      fetchControllers.set(staleKey, abortController);\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(r => fetchControllers.delete(r.key));\n    let redirect = findRedirect(results);\n\n    if (redirect) {\n      return startRedirectNavigation(state, redirect);\n    } // Process and commit output from loaders\n\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds);\n    let doneFetcher = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true\n    };\n    state.fetchers.set(key, doneFetcher);\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId); // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState(_extends({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors)\n      }, didAbortFetchLoads ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n      isRevalidationRequired = false;\n    }\n  } // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n\n\n  async function handleFetcherLoader(key, routeId, path, match, matches, submission) {\n    let existingFetcher = state.fetchers.get(key); // Put this fetcher into it's loading state\n\n    let loadingFetcher = _extends({\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined\n    }, submission, {\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true\n    });\n\n    state.fetchers.set(key, loadingFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }); // Call the loader for this fetcher route match\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let result = await callLoaderOrAction(\"loader\", fetchRequest, match, matches, manifest, detectErrorBoundary, router.basename); // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;\n    } // We can delete this so long as we weren't aborted by ou our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n\n\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    } // If the loader threw a redirect Response, start a new REPLACE navigation\n\n\n    if (isRedirectResult(result)) {\n      await startRedirectNavigation(state, result);\n      return;\n    } // Process any non-redirect errors thrown\n\n\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key); // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error\n        }\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\"); // Put the fetcher back into an idle state\n\n    let doneFetcher = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n\n\n  async function startRedirectNavigation(state, redirect, _temp) {\n    var _window;\n\n    let {\n      submission,\n      replace,\n      isFetchActionRedirect\n    } = _temp === void 0 ? {} : _temp;\n\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    let redirectLocation = createLocation(state.location, redirect.location, // TODO: This can be removed once we get rid of useTransition in Remix v2\n    _extends({\n      _isRedirect: true\n    }, isFetchActionRedirect ? {\n      _isFetchActionRedirect: true\n    } : {}));\n    invariant(redirectLocation, \"Expected a location on the redirect navigation\"); // Check if this an absolute external redirect that goes to a new origin\n\n    if (ABSOLUTE_URL_REGEX.test(redirect.location) && isBrowser && typeof ((_window = window) == null ? void 0 : _window.location) !== \"undefined\") {\n      let url = init.history.createURL(redirect.location);\n      let isDifferentBasename = stripBasename(url.pathname, init.basename || \"/\") == null;\n\n      if (window.location.origin !== url.origin || isDifferentBasename) {\n        if (replace) {\n          window.location.replace(redirect.location);\n        } else {\n          window.location.assign(redirect.location);\n        }\n\n        return;\n      }\n    } // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n\n\n    pendingNavigationController = null;\n    let redirectHistoryAction = replace === true ? Action.Replace : Action.Push; // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n\n    let {\n      formMethod,\n      formAction,\n      formEncType,\n      formData\n    } = state.navigation;\n\n    if (!submission && formMethod && formAction && formData && formEncType) {\n      submission = {\n        formMethod,\n        formAction,\n        formEncType,\n        formData\n      };\n    } // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n\n\n    if (redirectPreserveMethodStatusCodes.has(redirect.status) && submission && isMutationMethod(submission.formMethod)) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: _extends({}, submission, {\n          formAction: redirect.location\n        }),\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    } else if (isFetchActionRedirect) {\n      // For a fetch action redirect, we kick off a new loading navigation\n      // without the fetcher submission, but we send it along for shouldRevalidate\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined\n        },\n        fetcherSubmission: submission,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    } else {\n      // Otherwise, we kick off a new loading navigation, preserving the\n      // submission info for the duration of this navigation\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: submission ? submission.formMethod : undefined,\n          formAction: submission ? submission.formAction : undefined,\n          formEncType: submission ? submission.formEncType : undefined,\n          formData: submission ? submission.formData : undefined\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, manifest, detectErrorBoundary, router.basename)), ...fetchersToLoad.map(f => {\n      if (f.matches && f.match) {\n        return callLoaderOrAction(\"loader\", createClientSideRequest(init.history, f.path, request.signal), f.match, f.matches, manifest, detectErrorBoundary, router.basename);\n      } else {\n        let error = {\n          type: ResultType.error,\n          error: getInternalRouterError(404, {\n            pathname: f.path\n          })\n        };\n        return error;\n      }\n    })]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n    await Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, request.signal, false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(f => f.match), fetcherResults, request.signal, true)]);\n    return {\n      results,\n      loaderResults,\n      fetcherResults\n    };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true; // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds()); // Abort in-flight fetcher loads\n\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key, routeId, error) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    });\n  }\n\n  function deleteFetcher(key) {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, \"Expected fetcher: \" + key);\n\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key, fn) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  } // Utility function to update blockers, ensuring valid state transitions\n\n\n  function updateBlocker(key, newBlocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER; // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n\n    invariant(blocker.state === \"unblocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"proceeding\" || blocker.state === \"blocked\" && newBlocker.state === \"unblocked\" || blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\", \"Invalid blocker state transition: \" + blocker.state + \" -> \" + newBlocker.state);\n    state.blockers.set(key, newBlocker);\n    updateState({\n      blockers: new Map(state.blockers)\n    });\n  }\n\n  function shouldBlockNavigation(_ref2) {\n    let {\n      currentLocation,\n      nextLocation,\n      historyAction\n    } = _ref2;\n\n    if (blockerFunctions.size === 0) {\n      return;\n    } // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n\n\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    } // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n\n\n    if (blockerFunction({\n      currentLocation,\n      nextLocation,\n      historyAction\n    })) {\n      return blockerKey;\n    }\n  }\n\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  } // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n\n\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n\n    getScrollRestorationKey = getKey || (location => location.key); // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n\n\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map(m => createUseMatchesMatch(m, state.loaderData));\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map(m => createUseMatchesMatch(m, state.loaderData));\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n\n    return null;\n  }\n\n  function _internalSetRoutes(newRoutes) {\n    inFlightDataRoutes = newRoutes;\n  }\n\n  router = {\n    get basename() {\n      return init.basename;\n    },\n\n    get state() {\n      return state;\n    },\n\n    get routes() {\n      return dataRoutes;\n    },\n\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: to => init.history.createHref(to),\n    encodeLocation: to => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes\n  };\n  return router;\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nconst UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to createStaticHandler\");\n  let manifest = {};\n  let detectErrorBoundary = (opts == null ? void 0 : opts.detectErrorBoundary) || defaultDetectErrorBoundary;\n  let dataRoutes = convertRoutesToDataRoutes(routes, detectErrorBoundary, undefined, manifest);\n  let basename = (opts ? opts.basename : null) || \"/\";\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n\n  async function query(request, _temp2) {\n    let {\n      requestContext\n    } = _temp2 === void 0 ? {} : _temp2;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, {\n        method\n      });\n      let {\n        matches: methodNotAllowedMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext);\n\n    if (isResponse(result)) {\n      return result;\n    } // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n\n\n    return _extends({\n      location,\n      basename\n    }, result);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n\n\n  async function queryRoute(request, _temp3) {\n    let {\n      routeId,\n      requestContext\n    } = _temp3 === void 0 ? {} : _temp3;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, {\n        method\n      });\n    } else if (!matches) {\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n\n    let match = routeId ? matches.find(m => m.route.id === routeId) : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext, match);\n\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    } // Pick off the right state value to return\n\n\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      var _result$activeDeferre;\n\n      let data = Object.values(result.loaderData)[0];\n\n      if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(request, location, matches, requestContext, routeMatch) {\n    invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, routeMatch != null);\n        return result;\n      }\n\n      let result = await loadRouteData(request, matches, requestContext, routeMatch);\n      return isResponse(result) ? result : _extends({}, result, {\n        actionData: null,\n        actionHeaders: {}\n      });\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n\n        return e.response;\n      } // Redirects are always returned since they don't propagate to catch\n      // boundaries\n\n\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n\n      throw e;\n    }\n  }\n\n  async function submit(request, matches, actionMatch, requestContext, isRouteRequest) {\n    let result;\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id\n      });\n\n      if (isRouteRequest) {\n        throw error;\n      }\n\n      result = {\n        type: ResultType.error,\n        error\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, detectErrorBoundary, basename, true, isRouteRequest, requestContext);\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(method + \"() call aborted\");\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location\n        }\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n\n      if (isRouteRequest) {\n        throw error;\n      }\n\n      result = {\n        type: ResultType.error,\n        error\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(request, matches, requestContext, undefined, {\n        [boundaryMatch.route.id]: result.error\n      }); // action status codes take precedence over loader status codes\n\n      return _extends({}, context, {\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n        actionData: null,\n        actionHeaders: _extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    } // Create a GET request for the loaders\n\n\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n    return _extends({}, context, result.statusCode ? {\n      statusCode: result.statusCode\n    } : {}, {\n      actionData: {\n        [actionMatch.route.id]: result.data\n      },\n      actionHeaders: _extends({}, result.headers ? {\n        [actionMatch.route.id]: result.headers\n      } : {})\n    });\n  }\n\n  async function loadRouteData(request, matches, requestContext, routeMatch, pendingActionError) {\n    let isRouteRequest = routeMatch != null; // Short circuit if we have no loaders to run (queryRoute())\n\n    if (isRouteRequest && !(routeMatch != null && routeMatch.route.loader) && !(routeMatch != null && routeMatch.route.lazy)) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch == null ? void 0 : routeMatch.route.id\n      });\n    }\n\n    let requestMatches = routeMatch ? [routeMatch] : getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]);\n    let matchesToLoad = requestMatches.filter(m => m.route.loader || m.route.lazy); // Short circuit if we have no loaders to run (query())\n\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce((acc, m) => Object.assign(acc, {\n          [m.route.id]: null\n        }), {}),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null\n      };\n    }\n\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, manifest, detectErrorBoundary, basename, true, isRouteRequest, requestContext))]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(method + \"() call aborted\");\n    } // Process and commit output from loaders\n\n\n    let activeDeferreds = new Map();\n    let context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError, activeDeferreds); // Add a null for any non-loader matches for proper revalidation on the client\n\n    let executedLoaders = new Set(matchesToLoad.map(match => match.route.id));\n    matches.forEach(match => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n    return _extends({}, context, {\n      matches,\n      activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null\n    });\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\n\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = _extends({}, context, {\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n\n  return newContext;\n}\n\nfunction isSubmissionNavigation(opts) {\n  return opts != null && \"formData\" in opts;\n} // Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\n\n\nfunction normalizeNavigateOptions(to, future, opts, isFetcher) {\n  if (isFetcher === void 0) {\n    isFetcher = false;\n  }\n\n  let path = typeof to === \"string\" ? to : createPath(to); // Return location verbatim on non-submission navigations\n\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path\n    };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  } // Create a Submission on non-GET navigations\n\n\n  let submission;\n\n  if (opts.formData) {\n    let formMethod = opts.formMethod || \"get\";\n    submission = {\n      formMethod: future.v7_normalizeFormMethod ? formMethod.toUpperCase() : formMethod.toLowerCase(),\n      formAction: stripHashFromPath(path),\n      formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n      formData: opts.formData\n    };\n\n    if (isMutationMethod(submission.formMethod)) {\n      return {\n        path,\n        submission\n      };\n    }\n  } // Flatten submission onto URLSearchParams for GET submissions\n\n\n  let parsedPath = parsePath(path);\n  let searchParams = convertFormDataToSearchParams(opts.formData); // Since fetcher GET submissions only run a single loader (as opposed to\n  // navigation GET submissions which run all loaders), we need to preserve\n  // any incoming ?index params\n\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n\n  parsedPath.search = \"?\" + searchParams;\n  return {\n    path: createPath(parsedPath),\n    submission\n  };\n} // Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\n\n\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  let boundaryMatches = matches;\n\n  if (boundaryId) {\n    let index = matches.findIndex(m => m.route.id === boundaryId);\n\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(history, state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, routesToUse, basename, pendingActionData, pendingError) {\n  let actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n  let defaultShouldRevalidate = // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n  isRevalidationRequired || // Clicked the same link, resubmitted a GET form\n  currentUrl.toString() === nextUrl.toString() || // Search params affect all loaders\n  currentUrl.search !== nextUrl.search; // Pick navigation matches that are net-new or qualify for revalidation\n\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    if (match.route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n\n    if (match.route.loader == null) {\n      return false;\n    } // Always call the loader on new route instances and pending defer cancellations\n\n\n    if (isNewLoader(state.loaderData, state.matches[index], match) || cancelledDeferredRoutes.some(id => id === match.route.id)) {\n      return true;\n    } // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n\n\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n    return shouldRevalidateLoader(match, _extends({\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params\n    }, submission, {\n      actionResult,\n      defaultShouldRevalidate: defaultShouldRevalidate || isNewRouteInstance(currentRouteMatch, nextRouteMatch)\n    }));\n  }); // Pick fetcher.loads that need to be revalidated\n\n  let revalidatingFetchers = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate if fetcher won't be present in the subsequent render\n    if (!matches.some(m => m.route.id === f.routeId)) {\n      return;\n    }\n\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename); // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData\n\n    if (!fetcherMatches) {\n      revalidatingFetchers.push(_extends({\n        key\n      }, f, {\n        matches: null,\n        match: null\n      }));\n      return;\n    }\n\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n\n    if (cancelledFetcherLoads.includes(key)) {\n      revalidatingFetchers.push(_extends({\n        key,\n        matches: fetcherMatches,\n        match: fetcherMatch\n      }, f));\n      return;\n    } // Revalidating fetchers are decoupled from the route matches since they\n    // hit a static href, so they _always_ check shouldRevalidate and the\n    // default is strictly if a revalidation is explicitly required (action\n    // submissions, useRevalidator, X-Remix-Revalidate).\n\n\n    let shouldRevalidate = shouldRevalidateLoader(fetcherMatch, _extends({\n      currentUrl,\n      currentParams: state.matches[state.matches.length - 1].params,\n      nextUrl,\n      nextParams: matches[matches.length - 1].params\n    }, submission, {\n      actionResult,\n      defaultShouldRevalidate\n    }));\n\n    if (shouldRevalidate) {\n      revalidatingFetchers.push(_extends({\n        key,\n        matches: fetcherMatches,\n        match: fetcherMatch\n      }, f));\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew = // [a] -> [a, b]\n  !currentMatch || // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id; // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n\n  let isMissingData = currentLoaderData[match.route.id] === undefined; // Always load if this is a net-new route or we don't yet have data\n\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (// param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname || // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath != null && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\n\nfunction shouldRevalidateLoader(loaderMatch, arg) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\n\n\nasync function loadLazyRouteModule(route, detectErrorBoundary, manifest) {\n  if (!route.lazy) {\n    return;\n  }\n\n  let lazyRoute = await route.lazy(); // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n\n  if (!route.lazy) {\n    return;\n  }\n\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\"); // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n\n  let routeUpdates = {};\n\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue = routeToUpdate[lazyRouteProperty];\n    let isPropertyStaticallyDefined = staticRouteValue !== undefined && // This property isn't static since it should always be updated based\n    // on the route updates\n    lazyRouteProperty !== \"hasErrorBoundary\";\n    warning(!isPropertyStaticallyDefined, \"Route \\\"\" + routeToUpdate.id + \"\\\" has a static property \\\"\" + lazyRouteProperty + \"\\\" \" + \"defined but its lazy function is also returning a value for this property. \" + (\"The lazy route property \\\"\" + lazyRouteProperty + \"\\\" will be ignored.\"));\n\n    if (!isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty)) {\n      routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];\n    }\n  } // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to detectErrorBoundary\n\n\n  Object.assign(routeToUpdate, routeUpdates); // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n\n  Object.assign(routeToUpdate, {\n    // To keep things framework agnostic, we use the provided\n    // `detectErrorBoundary` function to set the `hasErrorBoundary` route\n    // property since the logic will differ between frameworks.\n    hasErrorBoundary: detectErrorBoundary(_extends({}, routeToUpdate)),\n    lazy: undefined\n  });\n}\n\nasync function callLoaderOrAction(type, request, match, matches, manifest, detectErrorBoundary, basename, isStaticRequest, isRouteRequest, requestContext) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n\n  if (isStaticRequest === void 0) {\n    isStaticRequest = false;\n  }\n\n  if (isRouteRequest === void 0) {\n    isRouteRequest = false;\n  }\n\n  let resultType;\n  let result;\n  let onReject;\n\n  let runHandler = handler => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject;\n    let abortPromise = new Promise((_, r) => reject = r);\n\n    onReject = () => reject();\n\n    request.signal.addEventListener(\"abort\", onReject);\n    return Promise.race([handler({\n      request,\n      params: match.params,\n      context: requestContext\n    }), abortPromise]);\n  };\n\n  try {\n    let handler = match.route[type];\n\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let values = await Promise.all([runHandler(handler), loadLazyRouteModule(match.route, detectErrorBoundary, manifest)]);\n        result = values[0];\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, detectErrorBoundary, manifest);\n        handler = match.route[type];\n\n        if (handler) {\n          // Handler still run even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname: new URL(request.url).pathname,\n            routeId: match.route.id\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return {\n            type: ResultType.data,\n            data: undefined\n          };\n        }\n      }\n    } else {\n      invariant(handler, \"Could not find the \" + type + \" to run on the \\\"\" + match.route.id + \"\\\" route\");\n      result = await runHandler(handler);\n    }\n\n    invariant(result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n\n  if (isResponse(result)) {\n    let status = result.status; // Process redirects\n\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\"); // Support relative routing in internal redirects\n\n      if (!ABSOLUTE_URL_REGEX.test(location)) {\n        let activeMatches = matches.slice(0, matches.indexOf(match) + 1);\n        let routePathnames = getPathContributingMatches(activeMatches).map(match => match.pathnameBase);\n        let resolvedLocation = resolveTo(location, routePathnames, new URL(request.url).pathname);\n        invariant(createPath(resolvedLocation), \"Unable to resolve redirect location: \" + location); // Prepend the basename to the redirect location if we have one\n\n        if (basename) {\n          let path = resolvedLocation.pathname;\n          resolvedLocation.pathname = path === \"/\" ? basename : joinPaths([basename, path]);\n        }\n\n        location = createPath(resolvedLocation);\n      } else if (!isStaticRequest) {\n        // Strip off the protocol+origin for same-origin + same-basename absolute\n        // redirects. If this is a static request, we can let it go back to the\n        // browser as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith(\"//\") ? new URL(currentUrl.protocol + location) : new URL(location);\n        let isSameBasename = stripBasename(url.pathname, basename) != null;\n\n        if (url.origin === currentUrl.origin && isSameBasename) {\n          location = url.pathname + url.search + url.hash;\n        }\n      } // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n\n\n      if (isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null\n      };\n    } // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n\n\n    if (isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result\n      };\n    }\n\n    let data;\n    let contentType = result.headers.get(\"Content-Type\"); // Check between word boundaries instead of startsWith() due to the last\n    // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n\n    if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return {\n      type: resultType,\n      error: result\n    };\n  }\n\n  if (isDeferredData(result)) {\n    var _result$init, _result$init2;\n\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status,\n      headers: ((_result$init2 = result.init) == null ? void 0 : _result$init2.headers) && new Headers(result.init.headers)\n    };\n  }\n\n  return {\n    type: ResultType.data,\n    data: result\n  };\n} // Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\n\n\nfunction createClientSideRequest(history, location, signal, submission) {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init = {\n    signal\n  };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let {\n      formMethod,\n      formEncType,\n      formData\n    } = submission; // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n\n    init.method = formMethod.toUpperCase();\n    init.body = formEncType === \"application/x-www-form-urlencoded\" ? convertFormDataToSearchParams(formData) : formData;\n  } // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, value instanceof File ? value.name : value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {}; // Process loader results into state.loaderData/state.errors\n\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error; // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = errors || {}; // Prefer higher error values if lower errors bubble to the same boundary\n\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      } // Clear our any prior loaderData for the throwing route\n\n\n      loaderData[id] = undefined; // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      } // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n\n\n      if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  }); // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\n\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds); // Process results from our revalidating fetchers\n\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let {\n      key,\n      match\n    } = revalidatingFetchers[index];\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    let result = fetcherResults[index]; // Process fetcher non-redirect errors\n\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match == null ? void 0 : match.route.id);\n\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return {\n    loaderData,\n    errors\n  };\n}\n\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n\n  for (let match of matches) {\n    let id = match.route.id;\n\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n\n  return mergedLoaderData;\n} // Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\n\n\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\n\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find(r => r.index || !r.path || r.path === \"/\") || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route\n  };\n}\n\nfunction getInternalRouterError(status, _temp4) {\n  let {\n    pathname,\n    routeId,\n    method,\n    type\n  } = _temp4 === void 0 ? {} : _temp4;\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n\n  return new ErrorResponse(status || 500, statusText, new Error(errorMessage), true);\n} // Find any returned redirect errors, starting from the lowest match\n\n\nfunction findRedirect(results) {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\nfunction stripHashFromPath(path) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\n\nfunction isHashChangeOnly(a, b) {\n  return a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash;\n}\n\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\n\nfunction isDeferredData(value) {\n  let deferred = value;\n  return deferred && typeof deferred === \"object\" && typeof deferred.data === \"object\" && typeof deferred.subscribe === \"function\" && typeof deferred.cancel === \"function\" && typeof deferred.resolveData === \"function\";\n}\n\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\n\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj) {\n  return obj && isResponse(obj.response) && (obj.type === ResultType.data || ResultType.error);\n}\n\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method.toLowerCase());\n}\n\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method.toLowerCase());\n}\n\nasync function resolveDeferredResults(currentMatches, matchesToLoad, results, signal, isFetcher, currentLoaderData) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index]; // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n\n    if (!match) {\n      continue;\n    }\n\n    let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, isFetcher).then(result => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(result, signal, unwrap) {\n  if (unwrap === void 0) {\n    unwrap = false;\n  }\n\n  let aborted = await result.deferredData.resolveData(signal);\n\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\n\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n} // Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\n\n\nfunction createUseMatchesMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\n\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  } // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n\n\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n} //#endregion\n\nexport { AbortedDeferredError, Action, ErrorResponse, IDLE_BLOCKER, IDLE_FETCHER, IDLE_NAVIGATION, UNSAFE_DEFERRED_SYMBOL, DeferredData as UNSAFE_DeferredData, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, getPathContributingMatches as UNSAFE_getPathContributingMatches, invariant as UNSAFE_invariant, warning as UNSAFE_warning, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, createStaticHandler, defer, generatePath, getStaticContextFromError, getToPathname, isDeferredData, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, resolvePath, resolveTo, stripBasename };\n//# sourceMappingURL=router.js.map\n","/**\n * React Router v6.10.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport { UNSAFE_invariant, joinPaths, matchPath, UNSAFE_getPathContributingMatches, UNSAFE_warning, resolveTo, parsePath, matchRoutes, Action, isRouteErrorResponse, createMemoryHistory, stripBasename, AbortedDeferredError, createRouter } from '@remix-run/router';\nexport { AbortedDeferredError, Action as NavigationType, createPath, defer, generatePath, isRouteErrorResponse, json, matchPath, matchRoutes, parsePath, redirect, resolvePath } from '@remix-run/router';\nimport * as React from 'react';\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n/**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */\n\nfunction isPolyfill(x, y) {\n  return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare\n  ;\n}\n\nconst is = typeof Object.is === \"function\" ? Object.is : isPolyfill; // Intentionally not using named imports because Rollup uses dynamic\n// dispatch for CommonJS interop named imports.\n\nconst {\n  useState,\n  useEffect,\n  useLayoutEffect,\n  useDebugValue\n} = React;\nlet didWarnOld18Alpha = false;\nlet didWarnUncachedGetSnapshot = false; // Disclaimer: This shim breaks many of the rules of React, and only works\n// because of a very particular set of implementation details and assumptions\n// -- change any one of them and it will break. The most important assumption\n// is that updates are always synchronous, because concurrent rendering is\n// only available in versions of React that also have a built-in\n// useSyncExternalStore API. And we only use this shim when the built-in API\n// does not exist.\n//\n// Do not assume that the clever hacks used by this hook also work in general.\n// The point of this shim is to replace the need for hacks by other libraries.\n\nfunction useSyncExternalStore$2(subscribe, getSnapshot, // Note: The shim does not use getServerSnapshot, because pre-18 versions of\n// React do not expose a way to check if we're hydrating. So users of the shim\n// will need to track that themselves and return the correct value\n// from `getSnapshot`.\ngetServerSnapshot) {\n  if (process.env.NODE_ENV !== \"production\") {\n    if (!didWarnOld18Alpha) {\n      if (\"startTransition\" in React) {\n        didWarnOld18Alpha = true;\n        console.error(\"You are using an outdated, pre-release alpha of React 18 that \" + \"does not support useSyncExternalStore. The \" + \"use-sync-external-store shim will not work correctly. Upgrade \" + \"to a newer pre-release.\");\n      }\n    }\n  } // Read the current snapshot from the store on every render. Again, this\n  // breaks the rules of React, and only works here because of specific\n  // implementation details, most importantly that updates are\n  // always synchronous.\n\n\n  const value = getSnapshot();\n\n  if (process.env.NODE_ENV !== \"production\") {\n    if (!didWarnUncachedGetSnapshot) {\n      const cachedValue = getSnapshot();\n\n      if (!is(value, cachedValue)) {\n        console.error(\"The result of getSnapshot should be cached to avoid an infinite loop\");\n        didWarnUncachedGetSnapshot = true;\n      }\n    }\n  } // Because updates are synchronous, we don't queue them. Instead we force a\n  // re-render whenever the subscribed state changes by updating an some\n  // arbitrary useState hook. Then, during render, we call getSnapshot to read\n  // the current value.\n  //\n  // Because we don't actually use the state returned by the useState hook, we\n  // can save a bit of memory by storing other stuff in that slot.\n  //\n  // To implement the early bailout, we need to track some things on a mutable\n  // object. Usually, we would put that in a useRef hook, but we can stash it in\n  // our useState hook instead.\n  //\n  // To force a re-render, we call forceUpdate({inst}). That works because the\n  // new object always fails an equality check.\n\n\n  const [{\n    inst\n  }, forceUpdate] = useState({\n    inst: {\n      value,\n      getSnapshot\n    }\n  }); // Track the latest getSnapshot function with a ref. This needs to be updated\n  // in the layout phase so we can access it during the tearing check that\n  // happens on subscribe.\n\n  useLayoutEffect(() => {\n    inst.value = value;\n    inst.getSnapshot = getSnapshot; // Whenever getSnapshot or subscribe changes, we need to check in the\n    // commit phase if there was an interleaved mutation. In concurrent mode\n    // this can happen all the time, but even in synchronous mode, an earlier\n    // effect may have mutated the store.\n\n    if (checkIfSnapshotChanged(inst)) {\n      // Force a re-render.\n      forceUpdate({\n        inst\n      });\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [subscribe, value, getSnapshot]);\n  useEffect(() => {\n    // Check for changes right before subscribing. Subsequent changes will be\n    // detected in the subscription handler.\n    if (checkIfSnapshotChanged(inst)) {\n      // Force a re-render.\n      forceUpdate({\n        inst\n      });\n    }\n\n    const handleStoreChange = () => {\n      // TODO: Because there is no cross-renderer API for batching updates, it's\n      // up to the consumer of this library to wrap their subscription event\n      // with unstable_batchedUpdates. Should we try to detect when this isn't\n      // the case and print a warning in development?\n      // The store changed. Check if the snapshot changed since the last time we\n      // read from the store.\n      if (checkIfSnapshotChanged(inst)) {\n        // Force a re-render.\n        forceUpdate({\n          inst\n        });\n      }\n    }; // Subscribe to the store and return a clean-up function.\n\n\n    return subscribe(handleStoreChange); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [subscribe]);\n  useDebugValue(value);\n  return value;\n}\n\nfunction checkIfSnapshotChanged(inst) {\n  const latestGetSnapshot = inst.getSnapshot;\n  const prevValue = inst.value;\n\n  try {\n    const nextValue = latestGetSnapshot();\n    return !is(prevValue, nextValue);\n  } catch (error) {\n    return true;\n  }\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\nfunction useSyncExternalStore$1(subscribe, getSnapshot, getServerSnapshot) {\n  // Note: The shim does not use getServerSnapshot, because pre-18 versions of\n  // React do not expose a way to check if we're hydrating. So users of the shim\n  // will need to track that themselves and return the correct value\n  // from `getSnapshot`.\n  return getSnapshot();\n}\n\n/**\n * Inlined into the react-router repo since use-sync-external-store does not\n * provide a UMD-compatible package, so we need this to be able to distribute\n * UMD react-router bundles\n */\nconst canUseDOM = !!(typeof window !== \"undefined\" && typeof window.document !== \"undefined\" && typeof window.document.createElement !== \"undefined\");\nconst isServerEnvironment = !canUseDOM;\nconst shim = isServerEnvironment ? useSyncExternalStore$1 : useSyncExternalStore$2;\nconst useSyncExternalStore = \"useSyncExternalStore\" in React ? (module => module.useSyncExternalStore)(React) : shim;\n\nconst DataRouterContext = /*#__PURE__*/React.createContext(null);\n\nif (process.env.NODE_ENV !== \"production\") {\n  DataRouterContext.displayName = \"DataRouter\";\n}\n\nconst DataRouterStateContext = /*#__PURE__*/React.createContext(null);\n\nif (process.env.NODE_ENV !== \"production\") {\n  DataRouterStateContext.displayName = \"DataRouterState\";\n}\n\nconst AwaitContext = /*#__PURE__*/React.createContext(null);\n\nif (process.env.NODE_ENV !== \"production\") {\n  AwaitContext.displayName = \"Await\";\n}\n\nconst NavigationContext = /*#__PURE__*/React.createContext(null);\n\nif (process.env.NODE_ENV !== \"production\") {\n  NavigationContext.displayName = \"Navigation\";\n}\n\nconst LocationContext = /*#__PURE__*/React.createContext(null);\n\nif (process.env.NODE_ENV !== \"production\") {\n  LocationContext.displayName = \"Location\";\n}\n\nconst RouteContext = /*#__PURE__*/React.createContext({\n  outlet: null,\n  matches: []\n});\n\nif (process.env.NODE_ENV !== \"production\") {\n  RouteContext.displayName = \"Route\";\n}\n\nconst RouteErrorContext = /*#__PURE__*/React.createContext(null);\n\nif (process.env.NODE_ENV !== \"production\") {\n  RouteErrorContext.displayName = \"RouteError\";\n}\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n/**\n * Returns the full href for the given \"to\" value. This is useful for building\n * custom links that are also accessible and preserve right-click behavior.\n *\n * @see https://reactrouter.com/hooks/use-href\n */\n\nfunction useHref(to, _temp) {\n  let {\n    relative\n  } = _temp === void 0 ? {} : _temp;\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useHref() may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\n  let {\n    basename,\n    navigator\n  } = React.useContext(NavigationContext);\n  let {\n    hash,\n    pathname,\n    search\n  } = useResolvedPath(to, {\n    relative\n  });\n  let joinedPathname = pathname; // If we're operating within a basename, prepend it to the pathname prior\n  // to creating the href.  If this is a root navigation, then just use the raw\n  // basename which allows the basename to have full control over the presence\n  // of a trailing slash on root links\n\n  if (basename !== \"/\") {\n    joinedPathname = pathname === \"/\" ? basename : joinPaths([basename, pathname]);\n  }\n\n  return navigator.createHref({\n    pathname: joinedPathname,\n    search,\n    hash\n  });\n}\n/**\n * Returns true if this component is a descendant of a <Router>.\n *\n * @see https://reactrouter.com/hooks/use-in-router-context\n */\n\nfunction useInRouterContext() {\n  return React.useContext(LocationContext) != null;\n}\n/**\n * Returns the current location object, which represents the current URL in web\n * browsers.\n *\n * Note: If you're using this it may mean you're doing some of your own\n * \"routing\" in your app, and we'd like to know what your use case is. We may\n * be able to provide something higher-level to better suit your needs.\n *\n * @see https://reactrouter.com/hooks/use-location\n */\n\nfunction useLocation() {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useLocation() may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\n  return React.useContext(LocationContext).location;\n}\n/**\n * Returns the current navigation action which describes how the router came to\n * the current location, either by a pop, push, or replace on the history stack.\n *\n * @see https://reactrouter.com/hooks/use-navigation-type\n */\n\nfunction useNavigationType() {\n  return React.useContext(LocationContext).navigationType;\n}\n/**\n * Returns a PathMatch object if the given pattern matches the current URL.\n * This is useful for components that need to know \"active\" state, e.g.\n * <NavLink>.\n *\n * @see https://reactrouter.com/hooks/use-match\n */\n\nfunction useMatch(pattern) {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useMatch() may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\n  let {\n    pathname\n  } = useLocation();\n  return React.useMemo(() => matchPath(pattern, pathname), [pathname, pattern]);\n}\n/**\n * The interface for the navigate() function returned from useNavigate().\n */\n\n/**\n * Returns an imperative method for changing the location. Used by <Link>s, but\n * may also be used by other elements to change the location.\n *\n * @see https://reactrouter.com/hooks/use-navigate\n */\nfunction useNavigate() {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useNavigate() may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\n  let {\n    basename,\n    navigator\n  } = React.useContext(NavigationContext);\n  let {\n    matches\n  } = React.useContext(RouteContext);\n  let {\n    pathname: locationPathname\n  } = useLocation();\n  let routePathnamesJson = JSON.stringify(UNSAFE_getPathContributingMatches(matches).map(match => match.pathnameBase));\n  let activeRef = React.useRef(false);\n  React.useEffect(() => {\n    activeRef.current = true;\n  });\n  let navigate = React.useCallback(function (to, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(activeRef.current, \"You should call navigate() in a React.useEffect(), not when \" + \"your component is first rendered.\") : void 0;\n    if (!activeRef.current) return;\n\n    if (typeof to === \"number\") {\n      navigator.go(to);\n      return;\n    }\n\n    let path = resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, options.relative === \"path\"); // If we're operating within a basename, prepend it to the pathname prior\n    // to handing off to history.  If this is a root navigation, then we\n    // navigate to the raw basename which allows the basename to have full\n    // control over the presence of a trailing slash on root links\n\n    if (basename !== \"/\") {\n      path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n    }\n\n    (!!options.replace ? navigator.replace : navigator.push)(path, options.state, options);\n  }, [basename, navigator, routePathnamesJson, locationPathname]);\n  return navigate;\n}\nconst OutletContext = /*#__PURE__*/React.createContext(null);\n/**\n * Returns the context (if provided) for the child route at this level of the route\n * hierarchy.\n * @see https://reactrouter.com/hooks/use-outlet-context\n */\n\nfunction useOutletContext() {\n  return React.useContext(OutletContext);\n}\n/**\n * Returns the element for the child route at this level of the route\n * hierarchy. Used internally by <Outlet> to render child routes.\n *\n * @see https://reactrouter.com/hooks/use-outlet\n */\n\nfunction useOutlet(context) {\n  let outlet = React.useContext(RouteContext).outlet;\n\n  if (outlet) {\n    return /*#__PURE__*/React.createElement(OutletContext.Provider, {\n      value: context\n    }, outlet);\n  }\n\n  return outlet;\n}\n/**\n * Returns an object of key/value pairs of the dynamic params from the current\n * URL that were matched by the route path.\n *\n * @see https://reactrouter.com/hooks/use-params\n */\n\nfunction useParams() {\n  let {\n    matches\n  } = React.useContext(RouteContext);\n  let routeMatch = matches[matches.length - 1];\n  return routeMatch ? routeMatch.params : {};\n}\n/**\n * Resolves the pathname of the given `to` value against the current location.\n *\n * @see https://reactrouter.com/hooks/use-resolved-path\n */\n\nfunction useResolvedPath(to, _temp2) {\n  let {\n    relative\n  } = _temp2 === void 0 ? {} : _temp2;\n  let {\n    matches\n  } = React.useContext(RouteContext);\n  let {\n    pathname: locationPathname\n  } = useLocation();\n  let routePathnamesJson = JSON.stringify(UNSAFE_getPathContributingMatches(matches).map(match => match.pathnameBase));\n  return React.useMemo(() => resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, relative === \"path\"), [to, routePathnamesJson, locationPathname, relative]);\n}\n/**\n * Returns the element of the route that matched the current location, prepared\n * with the correct context to render the remainder of the route tree. Route\n * elements in the tree must render an <Outlet> to render their child route's\n * element.\n *\n * @see https://reactrouter.com/hooks/use-routes\n */\n\nfunction useRoutes(routes, locationArg) {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useRoutes() may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\n  let {\n    navigator\n  } = React.useContext(NavigationContext);\n  let dataRouterStateContext = React.useContext(DataRouterStateContext);\n  let {\n    matches: parentMatches\n  } = React.useContext(RouteContext);\n  let routeMatch = parentMatches[parentMatches.length - 1];\n  let parentParams = routeMatch ? routeMatch.params : {};\n  let parentPathname = routeMatch ? routeMatch.pathname : \"/\";\n  let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : \"/\";\n  let parentRoute = routeMatch && routeMatch.route;\n\n  if (process.env.NODE_ENV !== \"production\") {\n    // You won't get a warning about 2 different <Routes> under a <Route>\n    // without a trailing *, but this is a best-effort warning anyway since we\n    // cannot even give the warning unless they land at the parent route.\n    //\n    // Example:\n    //\n    // <Routes>\n    //   {/* This route path MUST end with /* because otherwise\n    //       it will never match /blog/post/123 */}\n    //   <Route path=\"blog\" element={<Blog />} />\n    //   <Route path=\"blog/feed\" element={<BlogFeed />} />\n    // </Routes>\n    //\n    // function Blog() {\n    //   return (\n    //     <Routes>\n    //       <Route path=\"post/:id\" element={<Post />} />\n    //     </Routes>\n    //   );\n    // }\n    let parentPath = parentRoute && parentRoute.path || \"\";\n    warningOnce(parentPathname, !parentRoute || parentPath.endsWith(\"*\"), \"You rendered descendant <Routes> (or called `useRoutes()`) at \" + (\"\\\"\" + parentPathname + \"\\\" (under <Route path=\\\"\" + parentPath + \"\\\">) but the \") + \"parent route path has no trailing \\\"*\\\". This means if you navigate \" + \"deeper, the parent won't match anymore and therefore the child \" + \"routes will never render.\\n\\n\" + (\"Please change the parent <Route path=\\\"\" + parentPath + \"\\\"> to <Route \") + (\"path=\\\"\" + (parentPath === \"/\" ? \"*\" : parentPath + \"/*\") + \"\\\">.\"));\n  }\n\n  let locationFromContext = useLocation();\n  let location;\n\n  if (locationArg) {\n    var _parsedLocationArg$pa;\n\n    let parsedLocationArg = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n    !(parentPathnameBase === \"/\" || ((_parsedLocationArg$pa = parsedLocationArg.pathname) == null ? void 0 : _parsedLocationArg$pa.startsWith(parentPathnameBase))) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"When overriding the location using `<Routes location>` or `useRoutes(routes, location)`, \" + \"the location pathname must begin with the portion of the URL pathname that was \" + (\"matched by all parent routes. The current pathname base is \\\"\" + parentPathnameBase + \"\\\" \") + (\"but pathname \\\"\" + parsedLocationArg.pathname + \"\\\" was given in the `location` prop.\")) : UNSAFE_invariant(false) : void 0;\n    location = parsedLocationArg;\n  } else {\n    location = locationFromContext;\n  }\n\n  let pathname = location.pathname || \"/\";\n  let remainingPathname = parentPathnameBase === \"/\" ? pathname : pathname.slice(parentPathnameBase.length) || \"/\";\n  let matches = matchRoutes(routes, {\n    pathname: remainingPathname\n  });\n\n  if (process.env.NODE_ENV !== \"production\") {\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(parentRoute || matches != null, \"No routes matched location \\\"\" + location.pathname + location.search + location.hash + \"\\\" \") : void 0;\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(matches == null || matches[matches.length - 1].route.element !== undefined || matches[matches.length - 1].route.Component !== undefined, \"Matched leaf route at location \\\"\" + location.pathname + location.search + location.hash + \"\\\" \" + \"does not have an element or Component. This means it will render an <Outlet /> with a \" + \"null value by default resulting in an \\\"empty\\\" page.\") : void 0;\n  }\n\n  let renderedMatches = _renderMatches(matches && matches.map(match => Object.assign({}, match, {\n    params: Object.assign({}, parentParams, match.params),\n    pathname: joinPaths([parentPathnameBase, // Re-encode pathnames that were decoded inside matchRoutes\n    navigator.encodeLocation ? navigator.encodeLocation(match.pathname).pathname : match.pathname]),\n    pathnameBase: match.pathnameBase === \"/\" ? parentPathnameBase : joinPaths([parentPathnameBase, // Re-encode pathnames that were decoded inside matchRoutes\n    navigator.encodeLocation ? navigator.encodeLocation(match.pathnameBase).pathname : match.pathnameBase])\n  })), parentMatches, dataRouterStateContext || undefined); // When a user passes in a `locationArg`, the associated routes need to\n  // be wrapped in a new `LocationContext.Provider` in order for `useLocation`\n  // to use the scoped location instead of the global location.\n\n\n  if (locationArg && renderedMatches) {\n    return /*#__PURE__*/React.createElement(LocationContext.Provider, {\n      value: {\n        location: _extends({\n          pathname: \"/\",\n          search: \"\",\n          hash: \"\",\n          state: null,\n          key: \"default\"\n        }, location),\n        navigationType: Action.Pop\n      }\n    }, renderedMatches);\n  }\n\n  return renderedMatches;\n}\n\nfunction DefaultErrorComponent() {\n  let error = useRouteError();\n  let message = isRouteErrorResponse(error) ? error.status + \" \" + error.statusText : error instanceof Error ? error.message : JSON.stringify(error);\n  let stack = error instanceof Error ? error.stack : null;\n  let lightgrey = \"rgba(200,200,200, 0.5)\";\n  let preStyles = {\n    padding: \"0.5rem\",\n    backgroundColor: lightgrey\n  };\n  let codeStyles = {\n    padding: \"2px 4px\",\n    backgroundColor: lightgrey\n  };\n  let devInfo = null;\n\n  if (process.env.NODE_ENV !== \"production\") {\n    devInfo = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", null, \"\\uD83D\\uDCBF Hey developer \\uD83D\\uDC4B\"), /*#__PURE__*/React.createElement(\"p\", null, \"You can provide a way better UX than this when your app throws errors by providing your own\\xA0\", /*#__PURE__*/React.createElement(\"code\", {\n      style: codeStyles\n    }, \"ErrorBoundary\"), \" prop on\\xA0\", /*#__PURE__*/React.createElement(\"code\", {\n      style: codeStyles\n    }, \"<Route>\")));\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h2\", null, \"Unexpected Application Error!\"), /*#__PURE__*/React.createElement(\"h3\", {\n    style: {\n      fontStyle: \"italic\"\n    }\n  }, message), stack ? /*#__PURE__*/React.createElement(\"pre\", {\n    style: preStyles\n  }, stack) : null, devInfo);\n}\n\nclass RenderErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      location: props.location,\n      error: props.error\n    };\n  }\n\n  static getDerivedStateFromError(error) {\n    return {\n      error: error\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    // When we get into an error state, the user will likely click \"back\" to the\n    // previous page that didn't have an error. Because this wraps the entire\n    // application, that will have no effect--the error page continues to display.\n    // This gives us a mechanism to recover from the error when the location changes.\n    //\n    // Whether we're in an error state or not, we update the location in state\n    // so that when we are in an error state, it gets reset when a new location\n    // comes in and the user recovers from the error.\n    if (state.location !== props.location) {\n      return {\n        error: props.error,\n        location: props.location\n      };\n    } // If we're not changing locations, preserve the location but still surface\n    // any new errors that may come through. We retain the existing error, we do\n    // this because the error provided from the app state may be cleared without\n    // the location changing.\n\n\n    return {\n      error: props.error || state.error,\n      location: state.location\n    };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    console.error(\"React Router caught the following error during render\", error, errorInfo);\n  }\n\n  render() {\n    return this.state.error ? /*#__PURE__*/React.createElement(RouteContext.Provider, {\n      value: this.props.routeContext\n    }, /*#__PURE__*/React.createElement(RouteErrorContext.Provider, {\n      value: this.state.error,\n      children: this.props.component\n    })) : this.props.children;\n  }\n\n}\n\nfunction RenderedRoute(_ref) {\n  let {\n    routeContext,\n    match,\n    children\n  } = _ref;\n  let dataRouterContext = React.useContext(DataRouterContext); // Track how deep we got in our render pass to emulate SSR componentDidCatch\n  // in a DataStaticRouter\n\n  if (dataRouterContext && dataRouterContext.static && dataRouterContext.staticContext && (match.route.errorElement || match.route.ErrorBoundary)) {\n    dataRouterContext.staticContext._deepestRenderedBoundaryId = match.route.id;\n  }\n\n  return /*#__PURE__*/React.createElement(RouteContext.Provider, {\n    value: routeContext\n  }, children);\n}\n\nfunction _renderMatches(matches, parentMatches, dataRouterState) {\n  if (parentMatches === void 0) {\n    parentMatches = [];\n  }\n\n  if (matches == null) {\n    if (dataRouterState != null && dataRouterState.errors) {\n      // Don't bail if we have data router errors so we can render them in the\n      // boundary.  Use the pre-matched (or shimmed) matches\n      matches = dataRouterState.matches;\n    } else {\n      return null;\n    }\n  }\n\n  let renderedMatches = matches; // If we have data errors, trim matches to the highest error boundary\n\n  let errors = dataRouterState == null ? void 0 : dataRouterState.errors;\n\n  if (errors != null) {\n    let errorIndex = renderedMatches.findIndex(m => m.route.id && (errors == null ? void 0 : errors[m.route.id]));\n    !(errorIndex >= 0) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"Could not find a matching route for the current errors: \" + errors) : UNSAFE_invariant(false) : void 0;\n    renderedMatches = renderedMatches.slice(0, Math.min(renderedMatches.length, errorIndex + 1));\n  }\n\n  return renderedMatches.reduceRight((outlet, match, index) => {\n    let error = match.route.id ? errors == null ? void 0 : errors[match.route.id] : null; // Only data routers handle errors\n\n    let errorElement = null;\n\n    if (dataRouterState) {\n      if (match.route.ErrorBoundary) {\n        errorElement = /*#__PURE__*/React.createElement(match.route.ErrorBoundary, null);\n      } else if (match.route.errorElement) {\n        errorElement = match.route.errorElement;\n      } else {\n        errorElement = /*#__PURE__*/React.createElement(DefaultErrorComponent, null);\n      }\n    }\n\n    let matches = parentMatches.concat(renderedMatches.slice(0, index + 1));\n\n    let getChildren = () => {\n      let children = outlet;\n\n      if (error) {\n        children = errorElement;\n      } else if (match.route.Component) {\n        children = /*#__PURE__*/React.createElement(match.route.Component, null);\n      } else if (match.route.element) {\n        children = match.route.element;\n      }\n\n      return /*#__PURE__*/React.createElement(RenderedRoute, {\n        match: match,\n        routeContext: {\n          outlet,\n          matches\n        },\n        children: children\n      });\n    }; // Only wrap in an error boundary within data router usages when we have an\n    // ErrorBoundary/errorElement on this route.  Otherwise let it bubble up to\n    // an ancestor ErrorBoundary/errorElement\n\n\n    return dataRouterState && (match.route.ErrorBoundary || match.route.errorElement || index === 0) ? /*#__PURE__*/React.createElement(RenderErrorBoundary, {\n      location: dataRouterState.location,\n      component: errorElement,\n      error: error,\n      children: getChildren(),\n      routeContext: {\n        outlet: null,\n        matches\n      }\n    }) : getChildren();\n  }, null);\n}\nvar DataRouterHook;\n\n(function (DataRouterHook) {\n  DataRouterHook[\"UseBlocker\"] = \"useBlocker\";\n  DataRouterHook[\"UseRevalidator\"] = \"useRevalidator\";\n})(DataRouterHook || (DataRouterHook = {}));\n\nvar DataRouterStateHook;\n\n(function (DataRouterStateHook) {\n  DataRouterStateHook[\"UseBlocker\"] = \"useBlocker\";\n  DataRouterStateHook[\"UseLoaderData\"] = \"useLoaderData\";\n  DataRouterStateHook[\"UseActionData\"] = \"useActionData\";\n  DataRouterStateHook[\"UseRouteError\"] = \"useRouteError\";\n  DataRouterStateHook[\"UseNavigation\"] = \"useNavigation\";\n  DataRouterStateHook[\"UseRouteLoaderData\"] = \"useRouteLoaderData\";\n  DataRouterStateHook[\"UseMatches\"] = \"useMatches\";\n  DataRouterStateHook[\"UseRevalidator\"] = \"useRevalidator\";\n})(DataRouterStateHook || (DataRouterStateHook = {}));\n\nfunction getDataRouterConsoleError(hookName) {\n  return hookName + \" must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.\";\n}\n\nfunction useDataRouterContext(hookName) {\n  let ctx = React.useContext(DataRouterContext);\n  !ctx ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : UNSAFE_invariant(false) : void 0;\n  return ctx;\n}\n\nfunction useDataRouterState(hookName) {\n  let state = React.useContext(DataRouterStateContext);\n  !state ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : UNSAFE_invariant(false) : void 0;\n  return state;\n}\n\nfunction useRouteContext(hookName) {\n  let route = React.useContext(RouteContext);\n  !route ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : UNSAFE_invariant(false) : void 0;\n  return route;\n}\n\nfunction useCurrentRouteId(hookName) {\n  let route = useRouteContext(hookName);\n  let thisRoute = route.matches[route.matches.length - 1];\n  !thisRoute.route.id ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, hookName + \" can only be used on routes that contain a unique \\\"id\\\"\") : UNSAFE_invariant(false) : void 0;\n  return thisRoute.route.id;\n}\n/**\n * Returns the current navigation, defaulting to an \"idle\" navigation when\n * no navigation is in progress\n */\n\n\nfunction useNavigation() {\n  let state = useDataRouterState(DataRouterStateHook.UseNavigation);\n  return state.navigation;\n}\n/**\n * Returns a revalidate function for manually triggering revalidation, as well\n * as the current state of any manual revalidations\n */\n\nfunction useRevalidator() {\n  let dataRouterContext = useDataRouterContext(DataRouterHook.UseRevalidator);\n  let state = useDataRouterState(DataRouterStateHook.UseRevalidator);\n  return {\n    revalidate: dataRouterContext.router.revalidate,\n    state: state.revalidation\n  };\n}\n/**\n * Returns the active route matches, useful for accessing loaderData for\n * parent/child routes or the route \"handle\" property\n */\n\nfunction useMatches() {\n  let {\n    matches,\n    loaderData\n  } = useDataRouterState(DataRouterStateHook.UseMatches);\n  return React.useMemo(() => matches.map(match => {\n    let {\n      pathname,\n      params\n    } = match; // Note: This structure matches that created by createUseMatchesMatch\n    // in the @remix-run/router , so if you change this please also change\n    // that :)  Eventually we'll DRY this up\n\n    return {\n      id: match.route.id,\n      pathname,\n      params,\n      data: loaderData[match.route.id],\n      handle: match.route.handle\n    };\n  }), [matches, loaderData]);\n}\n/**\n * Returns the loader data for the nearest ancestor Route loader\n */\n\nfunction useLoaderData() {\n  let state = useDataRouterState(DataRouterStateHook.UseLoaderData);\n  let routeId = useCurrentRouteId(DataRouterStateHook.UseLoaderData);\n\n  if (state.errors && state.errors[routeId] != null) {\n    console.error(\"You cannot `useLoaderData` in an errorElement (routeId: \" + routeId + \")\");\n    return undefined;\n  }\n\n  return state.loaderData[routeId];\n}\n/**\n * Returns the loaderData for the given routeId\n */\n\nfunction useRouteLoaderData(routeId) {\n  let state = useDataRouterState(DataRouterStateHook.UseRouteLoaderData);\n  return state.loaderData[routeId];\n}\n/**\n * Returns the action data for the nearest ancestor Route action\n */\n\nfunction useActionData() {\n  let state = useDataRouterState(DataRouterStateHook.UseActionData);\n  let route = React.useContext(RouteContext);\n  !route ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"useActionData must be used inside a RouteContext\") : UNSAFE_invariant(false) : void 0;\n  return Object.values((state == null ? void 0 : state.actionData) || {})[0];\n}\n/**\n * Returns the nearest ancestor Route error, which could be a loader/action\n * error or a render error.  This is intended to be called from your\n * ErrorBoundary/errorElement to display a proper error message.\n */\n\nfunction useRouteError() {\n  var _state$errors;\n\n  let error = React.useContext(RouteErrorContext);\n  let state = useDataRouterState(DataRouterStateHook.UseRouteError);\n  let routeId = useCurrentRouteId(DataRouterStateHook.UseRouteError); // If this was a render error, we put it in a RouteError context inside\n  // of RenderErrorBoundary\n\n  if (error) {\n    return error;\n  } // Otherwise look for errors from our data router state\n\n\n  return (_state$errors = state.errors) == null ? void 0 : _state$errors[routeId];\n}\n/**\n * Returns the happy-path data from the nearest ancestor <Await /> value\n */\n\nfunction useAsyncValue() {\n  let value = React.useContext(AwaitContext);\n  return value == null ? void 0 : value._data;\n}\n/**\n * Returns the error from the nearest ancestor <Await /> value\n */\n\nfunction useAsyncError() {\n  let value = React.useContext(AwaitContext);\n  return value == null ? void 0 : value._error;\n}\nlet blockerId = 0;\n/**\n * Allow the application to block navigations within the SPA and present the\n * user a confirmation dialog to confirm the navigation.  Mostly used to avoid\n * using half-filled form data.  This does not handle hard-reloads or\n * cross-origin navigations.\n */\n\nfunction useBlocker(shouldBlock) {\n  let {\n    router\n  } = useDataRouterContext(DataRouterHook.UseBlocker);\n  let state = useDataRouterState(DataRouterStateHook.UseBlocker);\n  let [blockerKey] = React.useState(() => String(++blockerId));\n  let blockerFunction = React.useCallback(args => {\n    return typeof shouldBlock === \"function\" ? !!shouldBlock(args) : !!shouldBlock;\n  }, [shouldBlock]);\n  let blocker = router.getBlocker(blockerKey, blockerFunction); // Cleanup on unmount\n\n  React.useEffect(() => () => router.deleteBlocker(blockerKey), [router, blockerKey]); // Prefer the blocker from state since DataRouterContext is memoized so this\n  // ensures we update on blocker state updates\n\n  return state.blockers.get(blockerKey) || blocker;\n}\nconst alreadyWarned = {};\n\nfunction warningOnce(key, cond, message) {\n  if (!cond && !alreadyWarned[key]) {\n    alreadyWarned[key] = true;\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, message) : void 0;\n  }\n}\n\n/**\n * Given a Remix Router instance, render the appropriate UI\n */\nfunction RouterProvider(_ref) {\n  let {\n    fallbackElement,\n    router\n  } = _ref;\n  let getState = React.useCallback(() => router.state, [router]); // Sync router state to our component state to force re-renders\n\n  let state = useSyncExternalStore(router.subscribe, getState, // We have to provide this so React@18 doesn't complain during hydration,\n  // but we pass our serialized hydration data into the router so state here\n  // is already synced with what the server saw\n  getState);\n  let navigator = React.useMemo(() => {\n    return {\n      createHref: router.createHref,\n      encodeLocation: router.encodeLocation,\n      go: n => router.navigate(n),\n      push: (to, state, opts) => router.navigate(to, {\n        state,\n        preventScrollReset: opts == null ? void 0 : opts.preventScrollReset\n      }),\n      replace: (to, state, opts) => router.navigate(to, {\n        replace: true,\n        state,\n        preventScrollReset: opts == null ? void 0 : opts.preventScrollReset\n      })\n    };\n  }, [router]);\n  let basename = router.basename || \"/\";\n  let dataRouterContext = React.useMemo(() => ({\n    router,\n    navigator,\n    static: false,\n    basename\n  }), [router, navigator, basename]); // The fragment and {null} here are important!  We need them to keep React 18's\n  // useId happy when we are server-rendering since we may have a <script> here\n  // containing the hydrated server-side staticContext (from StaticRouterProvider).\n  // useId relies on the component tree structure to generate deterministic id's\n  // so we need to ensure it remains the same on the client even though\n  // we don't need the <script> tag\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(DataRouterContext.Provider, {\n    value: dataRouterContext\n  }, /*#__PURE__*/React.createElement(DataRouterStateContext.Provider, {\n    value: state\n  }, /*#__PURE__*/React.createElement(Router, {\n    basename: router.basename,\n    location: router.state.location,\n    navigationType: router.state.historyAction,\n    navigator: navigator\n  }, router.state.initialized ? /*#__PURE__*/React.createElement(Routes, null) : fallbackElement))), null);\n}\n\n/**\n * A <Router> that stores all entries in memory.\n *\n * @see https://reactrouter.com/router-components/memory-router\n */\nfunction MemoryRouter(_ref2) {\n  let {\n    basename,\n    children,\n    initialEntries,\n    initialIndex\n  } = _ref2;\n  let historyRef = React.useRef();\n\n  if (historyRef.current == null) {\n    historyRef.current = createMemoryHistory({\n      initialEntries,\n      initialIndex,\n      v5Compat: true\n    });\n  }\n\n  let history = historyRef.current;\n  let [state, setState] = React.useState({\n    action: history.action,\n    location: history.location\n  });\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n  return /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history\n  });\n}\n\n/**\n * Changes the current location.\n *\n * Note: This API is mostly useful in React.Component subclasses that are not\n * able to use hooks. In functional components, we recommend you use the\n * `useNavigate` hook instead.\n *\n * @see https://reactrouter.com/components/navigate\n */\nfunction Navigate(_ref3) {\n  let {\n    to,\n    replace,\n    state,\n    relative\n  } = _ref3;\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of\n  // the router loaded. We can help them understand how to avoid that.\n  \"<Navigate> may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\n  process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(!React.useContext(NavigationContext).static, \"<Navigate> must not be used on the initial render in a <StaticRouter>. \" + \"This is a no-op, but you should modify your code so the <Navigate> is \" + \"only ever rendered in response to some user interaction or state change.\") : void 0;\n  let dataRouterState = React.useContext(DataRouterStateContext);\n  let navigate = useNavigate();\n  React.useEffect(() => {\n    // Avoid kicking off multiple navigations if we're in the middle of a\n    // data-router navigation, since components get re-rendered when we enter\n    // a submitting/loading state\n    if (dataRouterState && dataRouterState.navigation.state !== \"idle\") {\n      return;\n    }\n\n    navigate(to, {\n      replace,\n      state,\n      relative\n    });\n  });\n  return null;\n}\n\n/**\n * Renders the child route's element, if there is one.\n *\n * @see https://reactrouter.com/components/outlet\n */\nfunction Outlet(props) {\n  return useOutlet(props.context);\n}\n\n/**\n * Declares an element that should be rendered at a certain URL path.\n *\n * @see https://reactrouter.com/components/route\n */\nfunction Route(_props) {\n  process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"A <Route> is only ever to be used as the child of <Routes> element, \" + \"never rendered directly. Please wrap your <Route> in a <Routes>.\") : UNSAFE_invariant(false) ;\n}\n\n/**\n * Provides location context for the rest of the app.\n *\n * Note: You usually won't render a <Router> directly. Instead, you'll render a\n * router that is more specific to your environment such as a <BrowserRouter>\n * in web browsers or a <StaticRouter> for server rendering.\n *\n * @see https://reactrouter.com/router-components/router\n */\nfunction Router(_ref4) {\n  let {\n    basename: basenameProp = \"/\",\n    children = null,\n    location: locationProp,\n    navigationType = Action.Pop,\n    navigator,\n    static: staticProp = false\n  } = _ref4;\n  !!useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"You cannot render a <Router> inside another <Router>.\" + \" You should never have more than one in your app.\") : UNSAFE_invariant(false) : void 0; // Preserve trailing slashes on basename, so we can let the user control\n  // the enforcement of trailing slashes throughout the app\n\n  let basename = basenameProp.replace(/^\\/*/, \"/\");\n  let navigationContext = React.useMemo(() => ({\n    basename,\n    navigator,\n    static: staticProp\n  }), [basename, navigator, staticProp]);\n\n  if (typeof locationProp === \"string\") {\n    locationProp = parsePath(locationProp);\n  }\n\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\",\n    state = null,\n    key = \"default\"\n  } = locationProp;\n  let locationContext = React.useMemo(() => {\n    let trailingPathname = stripBasename(pathname, basename);\n\n    if (trailingPathname == null) {\n      return null;\n    }\n\n    return {\n      location: {\n        pathname: trailingPathname,\n        search,\n        hash,\n        state,\n        key\n      },\n      navigationType\n    };\n  }, [basename, pathname, search, hash, state, key, navigationType]);\n  process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(locationContext != null, \"<Router basename=\\\"\" + basename + \"\\\"> is not able to match the URL \" + (\"\\\"\" + pathname + search + hash + \"\\\" because it does not start with the \") + \"basename, so the <Router> won't render anything.\") : void 0;\n\n  if (locationContext == null) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(NavigationContext.Provider, {\n    value: navigationContext\n  }, /*#__PURE__*/React.createElement(LocationContext.Provider, {\n    children: children,\n    value: locationContext\n  }));\n}\n\n/**\n * A container for a nested tree of <Route> elements that renders the branch\n * that best matches the current location.\n *\n * @see https://reactrouter.com/components/routes\n */\nfunction Routes(_ref5) {\n  let {\n    children,\n    location\n  } = _ref5;\n  let dataRouterContext = React.useContext(DataRouterContext); // When in a DataRouterContext _without_ children, we use the router routes\n  // directly.  If we have children, then we're in a descendant tree and we\n  // need to use child routes.\n\n  let routes = dataRouterContext && !children ? dataRouterContext.router.routes : createRoutesFromChildren(children);\n  return useRoutes(routes, location);\n}\n\n/**\n * Component to use for rendering lazily loaded data from returning defer()\n * in a loader function\n */\nfunction Await(_ref6) {\n  let {\n    children,\n    errorElement,\n    resolve\n  } = _ref6;\n  return /*#__PURE__*/React.createElement(AwaitErrorBoundary, {\n    resolve: resolve,\n    errorElement: errorElement\n  }, /*#__PURE__*/React.createElement(ResolveAwait, null, children));\n}\nvar AwaitRenderStatus;\n\n(function (AwaitRenderStatus) {\n  AwaitRenderStatus[AwaitRenderStatus[\"pending\"] = 0] = \"pending\";\n  AwaitRenderStatus[AwaitRenderStatus[\"success\"] = 1] = \"success\";\n  AwaitRenderStatus[AwaitRenderStatus[\"error\"] = 2] = \"error\";\n})(AwaitRenderStatus || (AwaitRenderStatus = {}));\n\nconst neverSettledPromise = new Promise(() => {});\n\nclass AwaitErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null\n    };\n  }\n\n  static getDerivedStateFromError(error) {\n    return {\n      error\n    };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    console.error(\"<Await> caught the following error during render\", error, errorInfo);\n  }\n\n  render() {\n    let {\n      children,\n      errorElement,\n      resolve\n    } = this.props;\n    let promise = null;\n    let status = AwaitRenderStatus.pending;\n\n    if (!(resolve instanceof Promise)) {\n      // Didn't get a promise - provide as a resolved promise\n      status = AwaitRenderStatus.success;\n      promise = Promise.resolve();\n      Object.defineProperty(promise, \"_tracked\", {\n        get: () => true\n      });\n      Object.defineProperty(promise, \"_data\", {\n        get: () => resolve\n      });\n    } else if (this.state.error) {\n      // Caught a render error, provide it as a rejected promise\n      status = AwaitRenderStatus.error;\n      let renderError = this.state.error;\n      promise = Promise.reject().catch(() => {}); // Avoid unhandled rejection warnings\n\n      Object.defineProperty(promise, \"_tracked\", {\n        get: () => true\n      });\n      Object.defineProperty(promise, \"_error\", {\n        get: () => renderError\n      });\n    } else if (resolve._tracked) {\n      // Already tracked promise - check contents\n      promise = resolve;\n      status = promise._error !== undefined ? AwaitRenderStatus.error : promise._data !== undefined ? AwaitRenderStatus.success : AwaitRenderStatus.pending;\n    } else {\n      // Raw (untracked) promise - track it\n      status = AwaitRenderStatus.pending;\n      Object.defineProperty(resolve, \"_tracked\", {\n        get: () => true\n      });\n      promise = resolve.then(data => Object.defineProperty(resolve, \"_data\", {\n        get: () => data\n      }), error => Object.defineProperty(resolve, \"_error\", {\n        get: () => error\n      }));\n    }\n\n    if (status === AwaitRenderStatus.error && promise._error instanceof AbortedDeferredError) {\n      // Freeze the UI by throwing a never resolved promise\n      throw neverSettledPromise;\n    }\n\n    if (status === AwaitRenderStatus.error && !errorElement) {\n      // No errorElement, throw to the nearest route-level error boundary\n      throw promise._error;\n    }\n\n    if (status === AwaitRenderStatus.error) {\n      // Render via our errorElement\n      return /*#__PURE__*/React.createElement(AwaitContext.Provider, {\n        value: promise,\n        children: errorElement\n      });\n    }\n\n    if (status === AwaitRenderStatus.success) {\n      // Render children with resolved value\n      return /*#__PURE__*/React.createElement(AwaitContext.Provider, {\n        value: promise,\n        children: children\n      });\n    } // Throw to the suspense boundary\n\n\n    throw promise;\n  }\n\n}\n/**\n * @private\n * Indirection to leverage useAsyncValue for a render-prop API on <Await>\n */\n\n\nfunction ResolveAwait(_ref7) {\n  let {\n    children\n  } = _ref7;\n  let data = useAsyncValue();\n  let toRender = typeof children === \"function\" ? children(data) : children;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, toRender);\n} ///////////////////////////////////////////////////////////////////////////////\n// UTILS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * Creates a route config from a React \"children\" object, which is usually\n * either a `<Route>` element or an array of them. Used internally by\n * `<Routes>` to create a route config from its children.\n *\n * @see https://reactrouter.com/utils/create-routes-from-children\n */\n\n\nfunction createRoutesFromChildren(children, parentPath) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n\n  let routes = [];\n  React.Children.forEach(children, (element, index) => {\n    if (! /*#__PURE__*/React.isValidElement(element)) {\n      // Ignore non-elements. This allows people to more easily inline\n      // conditionals in their route config.\n      return;\n    }\n\n    let treePath = [...parentPath, index];\n\n    if (element.type === React.Fragment) {\n      // Transparently support React.Fragment and its children.\n      routes.push.apply(routes, createRoutesFromChildren(element.props.children, treePath));\n      return;\n    }\n\n    !(element.type === Route) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"[\" + (typeof element.type === \"string\" ? element.type : element.type.name) + \"] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>\") : UNSAFE_invariant(false) : void 0;\n    !(!element.props.index || !element.props.children) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"An index route cannot have child routes.\") : UNSAFE_invariant(false) : void 0;\n    let route = {\n      id: element.props.id || treePath.join(\"-\"),\n      caseSensitive: element.props.caseSensitive,\n      element: element.props.element,\n      Component: element.props.Component,\n      index: element.props.index,\n      path: element.props.path,\n      loader: element.props.loader,\n      action: element.props.action,\n      errorElement: element.props.errorElement,\n      ErrorBoundary: element.props.ErrorBoundary,\n      hasErrorBoundary: element.props.ErrorBoundary != null || element.props.errorElement != null,\n      shouldRevalidate: element.props.shouldRevalidate,\n      handle: element.props.handle,\n      lazy: element.props.lazy\n    };\n\n    if (element.props.children) {\n      route.children = createRoutesFromChildren(element.props.children, treePath);\n    }\n\n    routes.push(route);\n  });\n  return routes;\n}\n/**\n * Renders the result of `matchRoutes()` into a React element.\n */\n\nfunction renderMatches(matches) {\n  return _renderMatches(matches);\n}\n\nfunction detectErrorBoundary(route) {\n  if (process.env.NODE_ENV !== \"production\") {\n    if (route.Component && route.element) {\n      process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"You should not include both `Component` and `element` on your route - \" + \"`element` will be ignored.\") : void 0;\n    }\n\n    if (route.ErrorBoundary && route.errorElement) {\n      process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"You should not include both `ErrorBoundary` and `errorElement` on your route - \" + \"`errorElement` will be ignored.\") : void 0;\n    }\n  } // Note: this check also occurs in createRoutesFromChildren so update\n  // there if you change this\n\n\n  return Boolean(route.ErrorBoundary) || Boolean(route.errorElement);\n}\n\nfunction createMemoryRouter(routes, opts) {\n  return createRouter({\n    basename: opts == null ? void 0 : opts.basename,\n    future: opts == null ? void 0 : opts.future,\n    history: createMemoryHistory({\n      initialEntries: opts == null ? void 0 : opts.initialEntries,\n      initialIndex: opts == null ? void 0 : opts.initialIndex\n    }),\n    hydrationData: opts == null ? void 0 : opts.hydrationData,\n    routes,\n    detectErrorBoundary\n  }).initialize();\n} ///////////////////////////////////////////////////////////////////////////////\n\nexport { Await, MemoryRouter, Navigate, Outlet, Route, Router, RouterProvider, Routes, DataRouterContext as UNSAFE_DataRouterContext, DataRouterStateContext as UNSAFE_DataRouterStateContext, LocationContext as UNSAFE_LocationContext, NavigationContext as UNSAFE_NavigationContext, RouteContext as UNSAFE_RouteContext, detectErrorBoundary as UNSAFE_detectErrorBoundary, createMemoryRouter, createRoutesFromChildren, createRoutesFromChildren as createRoutesFromElements, renderMatches, useBlocker as unstable_useBlocker, useActionData, useAsyncError, useAsyncValue, useHref, useInRouterContext, useLoaderData, useLocation, useMatch, useMatches, useNavigate, useNavigation, useNavigationType, useOutlet, useOutletContext, useParams, useResolvedPath, useRevalidator, useRouteError, useRouteLoaderData, useRoutes };\n//# sourceMappingURL=index.js.map\n"],"names":["_extends","Object","assign","bind","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","Action","PopStateEventType","createMemoryHistory","options","entries","initialEntries","initialIndex","v5Compat","map","entry","index","createMemoryLocation","state","undefined","clampIndex","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","location","createLocation","pathname","warning","charAt","JSON","stringify","createHref","createPath","createURL","URL","encodeLocation","path","parsePath","search","hash","push","Push","nextLocation","splice","delta","replace","Replace","go","nextIndex","listen","fn","createBrowserHistory","getUrlBasedHistory","window","globalHistory","usr","createHashHistory","substr","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","invariant","value","message","Error","cond","console","warn","e","getHistoryState","idx","current","random","toString","_ref","parsedPath","searchIndex","getLocation","validateLocation","defaultView","history","getIndex","handlePop","origin","replaceState","addEventListener","removeEventListener","historyState","pushState","error","ResultType","immutableRouteKeys","Set","convertRoutesToDataRoutes","routes","detectErrorBoundary","parentPath","manifest","route","treePath","id","join","children","isIndexRoute","indexRoute","hasErrorBoundary","pathOrLayoutRoute","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","sort","a","b","score","every","compareIndexes","routesMeta","meta","childrenIndex","rankRouteBranches","matches","matchRouteBranch","safelyDecodeURI","parentsMeta","flattenRoute","relativePath","caseSensitive","startsWith","joinPaths","concat","computeScore","forEach","_route$path","includes","exploded","explodeOptionalSegments","segments","split","first","rest","isOptional","endsWith","required","restExploded","result","subpath","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","initialScore","some","filter","reduce","segment","test","branch","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","params","pathnameBase","normalizePathname","generatePath","originalPath","array","keyMatch","optional","param","pattern","matcher","paramNames","regexpSource","_","paramName","RegExp","compilePath","captureGroups","memo","splatValue","decodeURIComponent","safelyDecodeURIComponent","decodeURI","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","pop","resolvePathname","normalizeSearch","normalizeHash","getInvalidPathError","char","field","dest","getPathContributingMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","from","isEmptyPath","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","paths","json","data","init","responseInit","status","headers","Headers","has","set","Response","AbortedDeferredError","DeferredData","constructor","reject","pendingKeysSet","subscribers","deferredKeys","Array","isArray","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","acc","trackPromise","done","add","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","emit","settledKey","subscriber","subscribe","cancel","abort","v","k","async","resolve","size","unwrappedData","_ref2","unwrapTrackedPromise","pendingKeys","_tracked","isTrackedPromise","_error","_data","defer","redirect","ErrorResponse","statusText","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","IDLE_FETCHER","IDLE_BLOCKER","proceed","reset","ABSOLUTE_URL_REGEX","isBrowser","createElement","isServer","defaultDetectErrorBoundary","Boolean","createRouter","inFlightDataRoutes","dataRoutes","future","v7_normalizeFormMethod","unlistenHistory","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","hydrationData","initialMatches","initialErrors","getInternalRouterError","getShortCircuitMatches","router","pendingNavigationController","initialized","m","lazy","loader","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","loaderData","actionData","errors","fetchers","Map","blockers","pendingAction","pendingPreventScrollReset","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeDeferreds","blockerFunctions","ignoreNextHistoryUpdate","updateState","newState","completeNavigation","_location$state","_location$state2","isActionReload","isMutationMethod","_isRedirect","keys","mergeLoaderData","deleteBlocker","getSavedScrollPosition","startNavigation","opts","startUninterruptedRevalidation","userMatches","createUseMatchesMatch","saveScrollPosition","routesToUse","loadingNavigation","overrideNavigation","notFoundMatches","cancelActiveDeferreds","submission","pendingActionData","pendingError","request","createClientSideRequest","findNearestBoundary","actionOutput","interruptActiveLoads","actionMatch","getTargetMatch","callLoaderOrAction","shortCircuited","type","method","routeId","isRedirectResult","startRedirectNavigation","isErrorResult","boundaryMatch","pendingActionError","isDeferredResult","handleAction","Request","fetcherSubmission","activeSubmission","matchesToLoad","revalidatingFetchers","getMatchesToLoad","rf","fetcher","revalidatingFetcher","results","loaderResults","fetcherResults","callLoadersAndMaybeResolveData","findRedirect","processLoaderData","deferredData","doneKeys","markFetchersDone","markFetchRedirectsDone","abortStaleFetchLoads","handleLoaders","getFetcher","_temp","_window","isFetchActionRedirect","revalidate","redirectLocation","_isFetchActionRedirect","isDifferentBasename","redirectHistoryAction","currentMatches","fetchersToLoad","all","f","resolveDeferredResults","abortFetcher","setFetcherError","deleteFetcher","doneFetcher","landedId","yeetedKeys","updateBlocker","newBlocker","blocker","shouldBlockNavigation","currentLocation","blockerKey","blockerFunction","predicate","cancelledRouteIds","dfd","y","initialize","enableScrollRestoration","positions","getPosition","getKey","navigate","normalizeNavigateOptions","userReplace","fetch","requestMatches","existingFetcher","abortController","fetchRequest","actionResult","loadingFetcher","revalidationRequest","loadId","loadFetcher","staleKey","didAbortFetchLoads","handleFetcherAction","resolveDeferredData","handleFetcherLoader","dispose","clear","getBlocker","_internalFetchControllers","_internalActiveDeferreds","_internalSetRoutes","newRoutes","isFetcher","isSubmissionNavigation","toUpperCase","stripHashFromPath","searchParams","convertFormDataToSearchParams","hasNakedIndexQuery","append","values","currentUrl","nextUrl","defaultShouldRevalidate","boundaryId","navigationMatches","boundaryMatches","findIndex","getLoaderMatchesUntilBoundary","currentLoaderData","currentMatch","isNew","isMissingData","isNewLoader","currentRouteMatch","nextRouteMatch","shouldRevalidateLoader","currentParams","nextParams","isNewRouteInstance","fetcherMatches","fetcherMatch","currentPath","loaderMatch","arg","shouldRevalidate","routeChoice","loadLazyRouteModule","lazyRoute","routeToUpdate","routeUpdates","lazyRouteProperty","isPropertyStaticallyDefined","isStaticRequest","isRouteRequest","requestContext","resultType","onReject","runHandler","handler","context","body","protocol","isSameBasename","resolvedLocation","response","contentType","text","statusCode","_result$init","_result$init2","deferred","resolveData","isDeferredData","URLSearchParams","File","name","foundError","loaderHeaders","processRouteLoaderData","newLoaderData","mergedLoaderData","reverse","find","_temp4","errorMessage","isRevalidatingLoader","unwrap","getAll","handle","pathMatches","Symbol","is","x","useState","useEffect","useLayoutEffect","useDebugValue","checkIfSnapshotChanged","inst","latestGetSnapshot","getSnapshot","prevValue","nextValue","shim","getServerSnapshot","forceUpdate","useSyncExternalStore","DataRouterContext","DataRouterStateContext","AwaitContext","NavigationContext","LocationContext","RouteContext","outlet","RouteErrorContext","useHref","relative","useInRouterContext","navigator","useResolvedPath","joinedPathname","useLocation","useNavigationType","navigationType","useMatch","useNavigate","routePathnamesJson","activeRef","parse","OutletContext","useOutletContext","useOutlet","Provider","useParams","routeMatch","_temp2","useRoutes","dataRouterStateContext","parentMatches","parentParams","parentPathnameBase","locationFromContext","_parsedLocationArg$pa","parsedLocationArg","renderedMatches","_renderMatches","DefaultErrorComponent","useRouteError","stack","preStyles","padding","backgroundColor","style","fontStyle","RenderErrorBoundary","props","super","static","componentDidCatch","errorInfo","render","routeContext","component","RenderedRoute","dataRouterContext","staticContext","errorElement","ErrorBoundary","_deepestRenderedBoundaryId","dataRouterState","errorIndex","reduceRight","getChildren","Component","element","DataRouterHook","DataRouterStateHook","useDataRouterContext","hookName","ctx","useDataRouterState","useCurrentRouteId","useRouteContext","thisRoute","useNavigation","UseNavigation","useRevalidator","UseRevalidator","useMatches","UseMatches","useLoaderData","UseLoaderData","useRouteLoaderData","UseRouteLoaderData","useActionData","UseActionData","_state$errors","UseRouteError","useAsyncValue","useAsyncError","blockerId","useBlocker","shouldBlock","UseBlocker","String","args","RouterProvider","fallbackElement","getState","Router","Routes","MemoryRouter","historyRef","setState","Navigate","_ref3","Outlet","Route","_props","_ref4","basenameProp","locationProp","staticProp","navigationContext","locationContext","trailingPathname","_ref5","createRoutesFromChildren","Await","_ref6","AwaitErrorBoundary","ResolveAwait","AwaitRenderStatus","neverSettledPromise","pending","renderError","success","_ref7","toRender","renderMatches","createMemoryRouter"],"sourceRoot":""}