{"version":3,"file":"authentication-ui/assets/chunk.439.0c21d24187239c7e91a0.js","mappings":"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","sources":["webpack://authentication-ui/./node_modules/react-hook-form/dist/index.esm.mjs"],"sourcesContent":["import React from 'react';\n\nvar isCheckBoxInput = (element) => element.type === 'checkbox';\n\nvar isDateObject = (value) => value instanceof Date;\n\nvar isNullOrUndefined = (value) => value == null;\n\nconst isObjectType = (value) => typeof value === 'object';\nvar isObject = (value) => !isNullOrUndefined(value) &&\n    !Array.isArray(value) &&\n    isObjectType(value) &&\n    !isDateObject(value);\n\nvar getEventValue = (event) => isObject(event) && event.target\n    ? isCheckBoxInput(event.target)\n        ? event.target.checked\n        : event.target.value\n    : event;\n\nvar getNodeParentName = (name) => name.substring(0, name.search(/\\.\\d+(\\.|$)/)) || name;\n\nvar isNameInFieldArray = (names, name) => names.has(getNodeParentName(name));\n\nvar isPlainObject = (tempObject) => {\n    const prototypeCopy = tempObject.constructor && tempObject.constructor.prototype;\n    return (isObject(prototypeCopy) && prototypeCopy.hasOwnProperty('isPrototypeOf'));\n};\n\nvar isWeb = typeof window !== 'undefined' &&\n    typeof window.HTMLElement !== 'undefined' &&\n    typeof document !== 'undefined';\n\nfunction cloneObject(data) {\n    let copy;\n    const isArray = Array.isArray(data);\n    if (data instanceof Date) {\n        copy = new Date(data);\n    }\n    else if (data instanceof Set) {\n        copy = new Set(data);\n    }\n    else if (!(isWeb && (data instanceof Blob || data instanceof FileList)) &&\n        (isArray || isObject(data))) {\n        copy = isArray ? [] : {};\n        if (!Array.isArray(data) && !isPlainObject(data)) {\n            copy = data;\n        }\n        else {\n            for (const key in data) {\n                copy[key] = cloneObject(data[key]);\n            }\n        }\n    }\n    else {\n        return data;\n    }\n    return copy;\n}\n\nvar compact = (value) => Array.isArray(value) ? value.filter(Boolean) : [];\n\nvar isUndefined = (val) => val === undefined;\n\nvar get = (obj, path, defaultValue) => {\n    if (!path || !isObject(obj)) {\n        return defaultValue;\n    }\n    const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], obj);\n    return isUndefined(result) || result === obj\n        ? isUndefined(obj[path])\n            ? defaultValue\n            : obj[path]\n        : result;\n};\n\nconst EVENTS = {\n    BLUR: 'blur',\n    FOCUS_OUT: 'focusout',\n    CHANGE: 'change',\n};\nconst VALIDATION_MODE = {\n    onBlur: 'onBlur',\n    onChange: 'onChange',\n    onSubmit: 'onSubmit',\n    onTouched: 'onTouched',\n    all: 'all',\n};\nconst INPUT_VALIDATION_RULES = {\n    max: 'max',\n    min: 'min',\n    maxLength: 'maxLength',\n    minLength: 'minLength',\n    pattern: 'pattern',\n    required: 'required',\n    validate: 'validate',\n};\n\nconst HookFormContext = React.createContext(null);\n/**\n * This custom hook allows you to access the form context. useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop. To be used with {@link FormProvider}.\n *\n * @remarks\n * [API](https://react-hook-form.com/api/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @returns return all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nconst useFormContext = () => React.useContext(HookFormContext);\n/**\n * A provider component that propagates the `useForm` methods to all children components via [React Context](https://reactjs.org/docs/context.html) API. To be used with {@link useFormContext}.\n *\n * @remarks\n * [API](https://react-hook-form.com/api/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @param props - all useFrom methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nconst FormProvider = (props) => {\n    const { children, ...data } = props;\n    return (React.createElement(HookFormContext.Provider, { value: data }, children));\n};\n\nvar getProxyFormState = (formState, control, localProxyFormState, isRoot = true) => {\n    const result = {\n        defaultValues: control._defaultValues,\n    };\n    for (const key in formState) {\n        Object.defineProperty(result, key, {\n            get: () => {\n                const _key = key;\n                if (control._proxyFormState[_key] !== VALIDATION_MODE.all) {\n                    control._proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\n                }\n                localProxyFormState && (localProxyFormState[_key] = true);\n                return formState[_key];\n            },\n        });\n    }\n    return result;\n};\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nvar shouldRenderFormState = (formStateData, _proxyFormState, updateFormState, isRoot) => {\n    updateFormState(formStateData);\n    const { name, ...formState } = formStateData;\n    return (isEmptyObject(formState) ||\n        Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n        Object.keys(formState).find((key) => _proxyFormState[key] ===\n            (!isRoot || VALIDATION_MODE.all)));\n};\n\nvar convertToArrayPayload = (value) => (Array.isArray(value) ? value : [value]);\n\nvar shouldSubscribeByName = (name, signalName, exact) => exact && signalName\n    ? name === signalName\n    : !name ||\n        !signalName ||\n        name === signalName ||\n        convertToArrayPayload(name).some((currentName) => currentName &&\n            (currentName.startsWith(signalName) ||\n                signalName.startsWith(currentName)));\n\nfunction useSubscribe(props) {\n    const _props = React.useRef(props);\n    _props.current = props;\n    React.useEffect(() => {\n        const subscription = !props.disabled &&\n            _props.current.subject &&\n            _props.current.subject.subscribe({\n                next: _props.current.next,\n            });\n        return () => {\n            subscription && subscription.unsubscribe();\n        };\n    }, [props.disabled]);\n}\n\n/**\n * This custom hook allows you to subscribe to each form state, and isolate the re-render at the custom hook level. It has its scope in terms of form state subscription, so it would not affect other useFormState and useForm. Using this hook can reduce the re-render impact on large and complex form application.\n *\n * @remarks\n * [API](https://react-hook-form.com/api/useformstate) • [Demo](https://codesandbox.io/s/useformstate-75xly)\n *\n * @param props - include options on specify fields to subscribe. {@link UseFormStateReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, control } = useForm({\n *     defaultValues: {\n *     firstName: \"firstName\"\n *   }});\n *   const { dirtyFields } = useFormState({\n *     control\n *   });\n *   const onSubmit = (data) => console.log(data);\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input {...register(\"firstName\")} placeholder=\"First Name\" />\n *       {dirtyFields.firstName && <p>Field is dirty.</p>}\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useFormState(props) {\n    const methods = useFormContext();\n    const { control = methods.control, disabled, name, exact } = props || {};\n    const [formState, updateFormState] = React.useState(control._formState);\n    const _mounted = React.useRef(true);\n    const _localProxyFormState = React.useRef({\n        isDirty: false,\n        isLoading: false,\n        dirtyFields: false,\n        touchedFields: false,\n        isValidating: false,\n        isValid: false,\n        errors: false,\n    });\n    const _name = React.useRef(name);\n    _name.current = name;\n    useSubscribe({\n        disabled,\n        next: (value) => _mounted.current &&\n            shouldSubscribeByName(_name.current, value.name, exact) &&\n            shouldRenderFormState(value, _localProxyFormState.current, control._updateFormState) &&\n            updateFormState({\n                ...control._formState,\n                ...value,\n            }),\n        subject: control._subjects.state,\n    });\n    React.useEffect(() => {\n        _mounted.current = true;\n        _localProxyFormState.current.isValid && control._updateValid(true);\n        return () => {\n            _mounted.current = false;\n        };\n    }, [control]);\n    return getProxyFormState(formState, control, _localProxyFormState.current, false);\n}\n\nvar isString = (value) => typeof value === 'string';\n\nvar generateWatchOutput = (names, _names, formValues, isGlobal, defaultValue) => {\n    if (isString(names)) {\n        isGlobal && _names.watch.add(names);\n        return get(formValues, names, defaultValue);\n    }\n    if (Array.isArray(names)) {\n        return names.map((fieldName) => (isGlobal && _names.watch.add(fieldName), get(formValues, fieldName)));\n    }\n    isGlobal && (_names.watchAll = true);\n    return formValues;\n};\n\n/**\n * Custom hook to subscribe to field change and isolate re-rendering at the component level.\n *\n * @remarks\n *\n * [API](https://react-hook-form.com/api/usewatch) • [Demo](https://codesandbox.io/s/react-hook-form-v7-ts-usewatch-h9i5e)\n *\n * @example\n * ```tsx\n * const { watch } = useForm();\n * const values = useWatch({\n *   name: \"fieldName\"\n *   control,\n * })\n * ```\n */\nfunction useWatch(props) {\n    const methods = useFormContext();\n    const { control = methods.control, name, defaultValue, disabled, exact, } = props || {};\n    const _name = React.useRef(name);\n    _name.current = name;\n    useSubscribe({\n        disabled,\n        subject: control._subjects.values,\n        next: (formState) => {\n            if (shouldSubscribeByName(_name.current, formState.name, exact)) {\n                updateValue(cloneObject(generateWatchOutput(_name.current, control._names, formState.values || control._formValues, false, defaultValue)));\n            }\n        },\n    });\n    const [value, updateValue] = React.useState(control._getWatch(name, defaultValue));\n    React.useEffect(() => control._removeUnmounted());\n    return value;\n}\n\nvar isKey = (value) => /^\\w*$/.test(value);\n\nvar stringToPath = (input) => compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n\nfunction set(object, path, value) {\n    let index = -1;\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\n    const length = tempPath.length;\n    const lastIndex = length - 1;\n    while (++index < length) {\n        const key = tempPath[index];\n        let newValue = value;\n        if (index !== lastIndex) {\n            const objValue = object[key];\n            newValue =\n                isObject(objValue) || Array.isArray(objValue)\n                    ? objValue\n                    : !isNaN(+tempPath[index + 1])\n                        ? []\n                        : {};\n        }\n        object[key] = newValue;\n        object = object[key];\n    }\n    return object;\n}\n\n/**\n * Custom hook to work with controlled component, this function provide you with both form and field level state. Re-render is isolated at the hook level.\n *\n * @remarks\n * [API](https://react-hook-form.com/api/usecontroller) • [Demo](https://codesandbox.io/s/usecontroller-0o8px)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns field properties, field and form state. {@link UseControllerReturn}\n *\n * @example\n * ```tsx\n * function Input(props) {\n *   const { field, fieldState, formState } = useController(props);\n *   return (\n *     <div>\n *       <input {...field} placeholder={props.name} />\n *       <p>{fieldState.isTouched && \"Touched\"}</p>\n *       <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *     </div>\n *   );\n * }\n * ```\n */\nfunction useController(props) {\n    const methods = useFormContext();\n    const { name, control = methods.control, shouldUnregister } = props;\n    const isArrayField = isNameInFieldArray(control._names.array, name);\n    const value = useWatch({\n        control,\n        name,\n        defaultValue: get(control._formValues, name, get(control._defaultValues, name, props.defaultValue)),\n        exact: true,\n    });\n    const formState = useFormState({\n        control,\n        name,\n    });\n    const _registerProps = React.useRef(control.register(name, {\n        ...props.rules,\n        value,\n    }));\n    React.useEffect(() => {\n        const _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;\n        const updateMounted = (name, value) => {\n            const field = get(control._fields, name);\n            if (field) {\n                field._f.mount = value;\n            }\n        };\n        updateMounted(name, true);\n        if (_shouldUnregisterField) {\n            const value = cloneObject(get(control._options.defaultValues, name));\n            set(control._defaultValues, name, value);\n            if (isUndefined(get(control._formValues, name))) {\n                set(control._formValues, name, value);\n            }\n        }\n        return () => {\n            (isArrayField\n                ? _shouldUnregisterField && !control._state.action\n                : _shouldUnregisterField)\n                ? control.unregister(name)\n                : updateMounted(name, false);\n        };\n    }, [name, control, isArrayField, shouldUnregister]);\n    return {\n        field: {\n            name,\n            value,\n            onChange: React.useCallback((event) => _registerProps.current.onChange({\n                target: {\n                    value: getEventValue(event),\n                    name: name,\n                },\n                type: EVENTS.CHANGE,\n            }), [name]),\n            onBlur: React.useCallback(() => _registerProps.current.onBlur({\n                target: {\n                    value: get(control._formValues, name),\n                    name: name,\n                },\n                type: EVENTS.BLUR,\n            }), [name, control]),\n            ref: (elm) => {\n                const field = get(control._fields, name);\n                if (field && elm) {\n                    field._f.ref = {\n                        focus: () => elm.focus(),\n                        select: () => elm.select(),\n                        setCustomValidity: (message) => elm.setCustomValidity(message),\n                        reportValidity: () => elm.reportValidity(),\n                    };\n                }\n            },\n        },\n        formState,\n        fieldState: Object.defineProperties({}, {\n            invalid: {\n                enumerable: true,\n                get: () => !!get(formState.errors, name),\n            },\n            isDirty: {\n                enumerable: true,\n                get: () => !!get(formState.dirtyFields, name),\n            },\n            isTouched: {\n                enumerable: true,\n                get: () => !!get(formState.touchedFields, name),\n            },\n            error: {\n                enumerable: true,\n                get: () => get(formState.errors, name),\n            },\n        }),\n    };\n}\n\n/**\n * Component based on `useController` hook to work with controlled component.\n *\n * @remarks\n * [API](https://react-hook-form.com/api/usecontroller/controller) • [Demo](https://codesandbox.io/s/react-hook-form-v6-controller-ts-jwyzw) • [Video](https://www.youtube.com/watch?v=N2UNk_UCVyA)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns provide field handler functions, field and form state.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control } = useForm<FormValues>({\n *     defaultValues: {\n *       test: \"\"\n *     }\n *   });\n *\n *   return (\n *     <form>\n *       <Controller\n *         control={control}\n *         name=\"test\"\n *         render={({ field: { onChange, onBlur, value, ref }, formState, fieldState }) => (\n *           <>\n *             <input\n *               onChange={onChange} // send value to hook form\n *               onBlur={onBlur} // notify when input is touched\n *               value={value} // return updated value\n *               ref={ref} // set ref for focus management\n *             />\n *             <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *             <p>{fieldState.isTouched ? \"touched\" : \"\"}</p>\n *           </>\n *         )}\n *       />\n *     </form>\n *   );\n * }\n * ```\n */\nconst Controller = (props) => props.render(useController(props));\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n            ...(errors[name] && errors[name].types ? errors[name].types : {}),\n            [type]: message || true,\n        },\n    }\n    : {};\n\nconst focusFieldBy = (fields, callback, fieldsNames) => {\n    for (const key of fieldsNames || Object.keys(fields)) {\n        const field = get(fields, key);\n        if (field) {\n            const { _f, ...currentField } = field;\n            if (_f && callback(_f.name)) {\n                if (_f.ref.focus) {\n                    _f.ref.focus();\n                    break;\n                }\n                else if (_f.refs && _f.refs[0].focus) {\n                    _f.refs[0].focus();\n                    break;\n                }\n            }\n            else if (isObject(currentField)) {\n                focusFieldBy(currentField, callback);\n            }\n        }\n    }\n};\n\nvar generateId = () => {\n    const d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n        const r = (Math.random() * 16 + d) % 16 | 0;\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n    });\n};\n\nvar getFocusFieldName = (name, index, options = {}) => options.shouldFocus || isUndefined(options.shouldFocus)\n    ? options.focusName ||\n        `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\n    : '';\n\nvar getValidationModes = (mode) => ({\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\n    isOnChange: mode === VALIDATION_MODE.onChange,\n    isOnAll: mode === VALIDATION_MODE.all,\n    isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n\nvar isWatched = (name, _names, isBlurEvent) => !isBlurEvent &&\n    (_names.watchAll ||\n        _names.watch.has(name) ||\n        [..._names.watch].some((watchName) => name.startsWith(watchName) &&\n            /^\\.\\w+/.test(name.slice(watchName.length))));\n\nvar updateFieldArrayRootError = (errors, error, name) => {\n    const fieldArrayErrors = compact(get(errors, name));\n    set(fieldArrayErrors, 'root', error[name]);\n    set(errors, name, fieldArrayErrors);\n    return errors;\n};\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nvar isFileInput = (element) => element.type === 'file';\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar isHTMLElement = (value) => {\n    if (!isWeb) {\n        return false;\n    }\n    const owner = value ? value.ownerDocument : 0;\n    return (value instanceof\n        (owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement));\n};\n\nvar isMessage = (value) => isString(value);\n\nvar isRadioInput = (element) => element.type === 'radio';\n\nvar isRegex = (value) => value instanceof RegExp;\n\nconst defaultResult = {\n    value: false,\n    isValid: false,\n};\nconst validResult = { value: true, isValid: true };\nvar getCheckboxValue = (options) => {\n    if (Array.isArray(options)) {\n        if (options.length > 1) {\n            const values = options\n                .filter((option) => option && option.checked && !option.disabled)\n                .map((option) => option.value);\n            return { value: values, isValid: !!values.length };\n        }\n        return options[0].checked && !options[0].disabled\n            ? // @ts-expect-error expected to work in the browser\n                options[0].attributes && !isUndefined(options[0].attributes.value)\n                    ? isUndefined(options[0].value) || options[0].value === ''\n                        ? validResult\n                        : { value: options[0].value, isValid: true }\n                    : validResult\n            : defaultResult;\n    }\n    return defaultResult;\n};\n\nconst defaultReturn = {\n    isValid: false,\n    value: null,\n};\nvar getRadioValue = (options) => Array.isArray(options)\n    ? options.reduce((previous, option) => option && option.checked && !option.disabled\n        ? {\n            isValid: true,\n            value: option.value,\n        }\n        : previous, defaultReturn)\n    : defaultReturn;\n\nfunction getValidateError(result, ref, type = 'validate') {\n    if (isMessage(result) ||\n        (Array.isArray(result) && result.every(isMessage)) ||\n        (isBoolean(result) && !result)) {\n        return {\n            type,\n            message: isMessage(result) ? result : '',\n            ref,\n        };\n    }\n}\n\nvar getValueAndMessage = (validationData) => isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n    };\n\nvar validateField = async (field, formValues, validateAllFieldCriteria, shouldUseNativeValidation, isFieldArray) => {\n    const { ref, refs, required, maxLength, minLength, min, max, pattern, validate, name, valueAsNumber, mount, disabled, } = field._f;\n    const inputValue = get(formValues, name);\n    if (!mount || disabled) {\n        return {};\n    }\n    const inputRef = refs ? refs[0] : ref;\n    const setCustomValidity = (message) => {\n        if (shouldUseNativeValidation && inputRef.reportValidity) {\n            inputRef.setCustomValidity(isBoolean(message) ? '' : message || '');\n            inputRef.reportValidity();\n        }\n    };\n    const error = {};\n    const isRadio = isRadioInput(ref);\n    const isCheckBox = isCheckBoxInput(ref);\n    const isRadioOrCheckbox = isRadio || isCheckBox;\n    const isEmpty = ((valueAsNumber || isFileInput(ref)) &&\n        isUndefined(ref.value) &&\n        isUndefined(inputValue)) ||\n        (isHTMLElement(ref) && ref.value === '') ||\n        inputValue === '' ||\n        (Array.isArray(inputValue) && !inputValue.length);\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\n        error[name] = {\n            type: exceedMax ? maxType : minType,\n            message,\n            ref,\n            ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n        };\n    };\n    if (isFieldArray\n        ? !Array.isArray(inputValue) || !inputValue.length\n        : required &&\n            ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n                (isBoolean(inputValue) && !inputValue) ||\n                (isCheckBox && !getCheckboxValue(refs).isValid) ||\n                (isRadio && !getRadioValue(refs).isValid))) {\n        const { value, message } = isMessage(required)\n            ? { value: !!required, message: required }\n            : getValueAndMessage(required);\n        if (value) {\n            error[name] = {\n                type: INPUT_VALIDATION_RULES.required,\n                message,\n                ref: inputRef,\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n            };\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(message);\n                return error;\n            }\n        }\n    }\n    if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n        let exceedMax;\n        let exceedMin;\n        const maxOutput = getValueAndMessage(max);\n        const minOutput = getValueAndMessage(min);\n        if (!isNullOrUndefined(inputValue) && !isNaN(inputValue)) {\n            const valueNumber = ref.valueAsNumber ||\n                (inputValue ? +inputValue : inputValue);\n            if (!isNullOrUndefined(maxOutput.value)) {\n                exceedMax = valueNumber > maxOutput.value;\n            }\n            if (!isNullOrUndefined(minOutput.value)) {\n                exceedMin = valueNumber < minOutput.value;\n            }\n        }\n        else {\n            const valueDate = ref.valueAsDate || new Date(inputValue);\n            const convertTimeToDate = (time) => new Date(new Date().toDateString() + ' ' + time);\n            const isTime = ref.type == 'time';\n            const isWeek = ref.type == 'week';\n            if (isString(maxOutput.value) && inputValue) {\n                exceedMax = isTime\n                    ? convertTimeToDate(inputValue) > convertTimeToDate(maxOutput.value)\n                    : isWeek\n                        ? inputValue > maxOutput.value\n                        : valueDate > new Date(maxOutput.value);\n            }\n            if (isString(minOutput.value) && inputValue) {\n                exceedMin = isTime\n                    ? convertTimeToDate(inputValue) < convertTimeToDate(minOutput.value)\n                    : isWeek\n                        ? inputValue < minOutput.value\n                        : valueDate < new Date(minOutput.value);\n            }\n        }\n        if (exceedMax || exceedMin) {\n            getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(error[name].message);\n                return error;\n            }\n        }\n    }\n    if ((maxLength || minLength) &&\n        !isEmpty &&\n        (isString(inputValue) || (isFieldArray && Array.isArray(inputValue)))) {\n        const maxLengthOutput = getValueAndMessage(maxLength);\n        const minLengthOutput = getValueAndMessage(minLength);\n        const exceedMax = !isNullOrUndefined(maxLengthOutput.value) &&\n            inputValue.length > +maxLengthOutput.value;\n        const exceedMin = !isNullOrUndefined(minLengthOutput.value) &&\n            inputValue.length < +minLengthOutput.value;\n        if (exceedMax || exceedMin) {\n            getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(error[name].message);\n                return error;\n            }\n        }\n    }\n    if (pattern && !isEmpty && isString(inputValue)) {\n        const { value: patternValue, message } = getValueAndMessage(pattern);\n        if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n            error[name] = {\n                type: INPUT_VALIDATION_RULES.pattern,\n                message,\n                ref,\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n            };\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(message);\n                return error;\n            }\n        }\n    }\n    if (validate) {\n        if (isFunction(validate)) {\n            const result = await validate(inputValue, formValues);\n            const validateError = getValidateError(result, inputRef);\n            if (validateError) {\n                error[name] = {\n                    ...validateError,\n                    ...appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message),\n                };\n                if (!validateAllFieldCriteria) {\n                    setCustomValidity(validateError.message);\n                    return error;\n                }\n            }\n        }\n        else if (isObject(validate)) {\n            let validationResult = {};\n            for (const key in validate) {\n                if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n                    break;\n                }\n                const validateError = getValidateError(await validate[key](inputValue, formValues), inputRef, key);\n                if (validateError) {\n                    validationResult = {\n                        ...validateError,\n                        ...appendErrorsCurry(key, validateError.message),\n                    };\n                    setCustomValidity(validateError.message);\n                    if (validateAllFieldCriteria) {\n                        error[name] = validationResult;\n                    }\n                }\n            }\n            if (!isEmptyObject(validationResult)) {\n                error[name] = {\n                    ref: inputRef,\n                    ...validationResult,\n                };\n                if (!validateAllFieldCriteria) {\n                    return error;\n                }\n            }\n        }\n    }\n    setCustomValidity(true);\n    return error;\n};\n\nfunction append(data, value) {\n    return [...data, ...convertToArrayPayload(value)];\n}\n\nvar fillEmptyArray = (value) => Array.isArray(value) ? value.map(() => undefined) : undefined;\n\nfunction insert(data, index, value) {\n    return [\n        ...data.slice(0, index),\n        ...convertToArrayPayload(value),\n        ...data.slice(index),\n    ];\n}\n\nvar moveArrayAt = (data, from, to) => {\n    if (!Array.isArray(data)) {\n        return [];\n    }\n    if (isUndefined(data[to])) {\n        data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n};\n\nfunction prepend(data, value) {\n    return [...convertToArrayPayload(value), ...convertToArrayPayload(data)];\n}\n\nfunction removeAtIndexes(data, indexes) {\n    let i = 0;\n    const temp = [...data];\n    for (const index of indexes) {\n        temp.splice(index - i, 1);\n        i++;\n    }\n    return compact(temp).length ? temp : [];\n}\nvar removeArrayAt = (data, index) => isUndefined(index)\n    ? []\n    : removeAtIndexes(data, convertToArrayPayload(index).sort((a, b) => a - b));\n\nvar swapArrayAt = (data, indexA, indexB) => {\n    data[indexA] = [data[indexB], (data[indexB] = data[indexA])][0];\n};\n\nfunction baseGet(object, updatePath) {\n    const length = updatePath.slice(0, -1).length;\n    let index = 0;\n    while (index < length) {\n        object = isUndefined(object) ? index++ : object[updatePath[index++]];\n    }\n    return object;\n}\nfunction isEmptyArray(obj) {\n    for (const key in obj) {\n        if (!isUndefined(obj[key])) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction unset(object, path) {\n    const paths = Array.isArray(path)\n        ? path\n        : isKey(path)\n            ? [path]\n            : stringToPath(path);\n    const childObject = paths.length === 1 ? object : baseGet(object, paths);\n    const index = paths.length - 1;\n    const key = paths[index];\n    if (childObject) {\n        delete childObject[key];\n    }\n    if (index !== 0 &&\n        ((isObject(childObject) && isEmptyObject(childObject)) ||\n            (Array.isArray(childObject) && isEmptyArray(childObject)))) {\n        unset(object, paths.slice(0, -1));\n    }\n    return object;\n}\n\nvar updateAt = (fieldValues, index, value) => {\n    fieldValues[index] = value;\n    return fieldValues;\n};\n\n/**\n * A custom hook that exposes convenient methods to perform operations with a list of dynamic inputs that need to be appended, updated, removed etc. • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn) • [Video](https://youtu.be/4MrbfGSFY2A)\n *\n * @remarks\n * [API](https://react-hook-form.com/api/usefieldarray) • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn)\n *\n * @param props - useFieldArray props\n *\n * @returns methods - functions to manipulate with the Field Arrays (dynamic inputs) {@link UseFieldArrayReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, control, handleSubmit, reset, trigger, setError } = useForm({\n *     defaultValues: {\n *       test: []\n *     }\n *   });\n *   const { fields, append } = useFieldArray({\n *     control,\n *     name: \"test\"\n *   });\n *\n *   return (\n *     <form onSubmit={handleSubmit(data => console.log(data))}>\n *       {fields.map((item, index) => (\n *          <input key={item.id} {...register(`test.${index}.firstName`)}  />\n *       ))}\n *       <button type=\"button\" onClick={() => append({ firstName: \"bill\" })}>\n *         append\n *       </button>\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useFieldArray(props) {\n    const methods = useFormContext();\n    const { control = methods.control, name, keyName = 'id', shouldUnregister, } = props;\n    const [fields, setFields] = React.useState(control._getFieldArray(name));\n    const ids = React.useRef(control._getFieldArray(name).map(generateId));\n    const _fieldIds = React.useRef(fields);\n    const _name = React.useRef(name);\n    const _actioned = React.useRef(false);\n    _name.current = name;\n    _fieldIds.current = fields;\n    control._names.array.add(name);\n    props.rules &&\n        control.register(name, props.rules);\n    useSubscribe({\n        next: ({ values, name: fieldArrayName, }) => {\n            if (fieldArrayName === _name.current || !fieldArrayName) {\n                const fieldValues = get(values, _name.current);\n                if (Array.isArray(fieldValues)) {\n                    setFields(fieldValues);\n                    ids.current = fieldValues.map(generateId);\n                }\n            }\n        },\n        subject: control._subjects.array,\n    });\n    const updateValues = React.useCallback((updatedFieldArrayValues) => {\n        _actioned.current = true;\n        control._updateFieldArray(name, updatedFieldArrayValues);\n    }, [control, name]);\n    const append$1 = (value, options) => {\n        const appendValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = append(control._getFieldArray(name), appendValue);\n        control._names.focus = getFocusFieldName(name, updatedFieldArrayValues.length - 1, options);\n        ids.current = append(ids.current, appendValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, append, {\n            argA: fillEmptyArray(value),\n        });\n    };\n    const prepend$1 = (value, options) => {\n        const prependValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = prepend(control._getFieldArray(name), prependValue);\n        control._names.focus = getFocusFieldName(name, 0, options);\n        ids.current = prepend(ids.current, prependValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, prepend, {\n            argA: fillEmptyArray(value),\n        });\n    };\n    const remove = (index) => {\n        const updatedFieldArrayValues = removeArrayAt(control._getFieldArray(name), index);\n        ids.current = removeArrayAt(ids.current, index);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, removeArrayAt, {\n            argA: index,\n        });\n    };\n    const insert$1 = (index, value, options) => {\n        const insertValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = insert(control._getFieldArray(name), index, insertValue);\n        control._names.focus = getFocusFieldName(name, index, options);\n        ids.current = insert(ids.current, index, insertValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, insert, {\n            argA: index,\n            argB: fillEmptyArray(value),\n        });\n    };\n    const swap = (indexA, indexB) => {\n        const updatedFieldArrayValues = control._getFieldArray(name);\n        swapArrayAt(updatedFieldArrayValues, indexA, indexB);\n        swapArrayAt(ids.current, indexA, indexB);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, swapArrayAt, {\n            argA: indexA,\n            argB: indexB,\n        }, false);\n    };\n    const move = (from, to) => {\n        const updatedFieldArrayValues = control._getFieldArray(name);\n        moveArrayAt(updatedFieldArrayValues, from, to);\n        moveArrayAt(ids.current, from, to);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, moveArrayAt, {\n            argA: from,\n            argB: to,\n        }, false);\n    };\n    const update = (index, value) => {\n        const updateValue = cloneObject(value);\n        const updatedFieldArrayValues = updateAt(control._getFieldArray(name), index, updateValue);\n        ids.current = [...updatedFieldArrayValues].map((item, i) => !item || i === index ? generateId() : ids.current[i]);\n        updateValues(updatedFieldArrayValues);\n        setFields([...updatedFieldArrayValues]);\n        control._updateFieldArray(name, updatedFieldArrayValues, updateAt, {\n            argA: index,\n            argB: updateValue,\n        }, true, false);\n    };\n    const replace = (value) => {\n        const updatedFieldArrayValues = convertToArrayPayload(cloneObject(value));\n        ids.current = updatedFieldArrayValues.map(generateId);\n        updateValues([...updatedFieldArrayValues]);\n        setFields([...updatedFieldArrayValues]);\n        control._updateFieldArray(name, [...updatedFieldArrayValues], (data) => data, {}, true, false);\n    };\n    React.useEffect(() => {\n        control._state.action = false;\n        isWatched(name, control._names) &&\n            control._subjects.state.next({\n                ...control._formState,\n            });\n        if (_actioned.current &&\n            (!getValidationModes(control._options.mode).isOnSubmit ||\n                control._formState.isSubmitted)) {\n            if (control._options.resolver) {\n                control._executeSchema([name]).then((result) => {\n                    const error = get(result.errors, name);\n                    const existingError = get(control._formState.errors, name);\n                    if (existingError ? !error && existingError.type : error && error.type) {\n                        error\n                            ? set(control._formState.errors, name, error)\n                            : unset(control._formState.errors, name);\n                        control._subjects.state.next({\n                            errors: control._formState.errors,\n                        });\n                    }\n                });\n            }\n            else {\n                const field = get(control._fields, name);\n                if (field && field._f) {\n                    validateField(field, control._formValues, control._options.criteriaMode === VALIDATION_MODE.all, control._options.shouldUseNativeValidation, true).then((error) => !isEmptyObject(error) &&\n                        control._subjects.state.next({\n                            errors: updateFieldArrayRootError(control._formState.errors, error, name),\n                        }));\n                }\n            }\n        }\n        control._subjects.values.next({\n            name,\n            values: { ...control._formValues },\n        });\n        control._names.focus &&\n            focusFieldBy(control._fields, (key) => !!key && key.startsWith(control._names.focus || ''));\n        control._names.focus = '';\n        control._updateValid();\n    }, [fields, name, control]);\n    React.useEffect(() => {\n        !get(control._formValues, name) && control._updateFieldArray(name);\n        return () => {\n            (control._options.shouldUnregister || shouldUnregister) &&\n                control.unregister(name);\n        };\n    }, [name, control, keyName, shouldUnregister]);\n    return {\n        swap: React.useCallback(swap, [updateValues, name, control]),\n        move: React.useCallback(move, [updateValues, name, control]),\n        prepend: React.useCallback(prepend$1, [updateValues, name, control]),\n        append: React.useCallback(append$1, [updateValues, name, control]),\n        remove: React.useCallback(remove, [updateValues, name, control]),\n        insert: React.useCallback(insert$1, [updateValues, name, control]),\n        update: React.useCallback(update, [updateValues, name, control]),\n        replace: React.useCallback(replace, [updateValues, name, control]),\n        fields: React.useMemo(() => fields.map((field, index) => ({\n            ...field,\n            [keyName]: ids.current[index] || generateId(),\n        })), [fields, keyName]),\n    };\n}\n\nfunction createSubject() {\n    let _observers = [];\n    const next = (value) => {\n        for (const observer of _observers) {\n            observer.next && observer.next(value);\n        }\n    };\n    const subscribe = (observer) => {\n        _observers.push(observer);\n        return {\n            unsubscribe: () => {\n                _observers = _observers.filter((o) => o !== observer);\n            },\n        };\n    };\n    const unsubscribe = () => {\n        _observers = [];\n    };\n    return {\n        get observers() {\n            return _observers;\n        },\n        next,\n        subscribe,\n        unsubscribe,\n    };\n}\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nfunction deepEqual(object1, object2) {\n    if (isPrimitive(object1) || isPrimitive(object2)) {\n        return object1 === object2;\n    }\n    if (isDateObject(object1) && isDateObject(object2)) {\n        return object1.getTime() === object2.getTime();\n    }\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n    if (keys1.length !== keys2.length) {\n        return false;\n    }\n    for (const key of keys1) {\n        const val1 = object1[key];\n        if (!keys2.includes(key)) {\n            return false;\n        }\n        if (key !== 'ref') {\n            const val2 = object2[key];\n            if ((isDateObject(val1) && isDateObject(val2)) ||\n                (isObject(val1) && isObject(val2)) ||\n                (Array.isArray(val1) && Array.isArray(val2))\n                ? !deepEqual(val1, val2)\n                : val1 !== val2) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nvar isMultipleSelect = (element) => element.type === `select-multiple`;\n\nvar isRadioOrCheckbox = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);\n\nvar live = (ref) => isHTMLElement(ref) && ref.isConnected;\n\nvar objectHasFunction = (data) => {\n    for (const key in data) {\n        if (isFunction(data[key])) {\n            return true;\n        }\n    }\n    return false;\n};\n\nfunction markFieldsDirty(data, fields = {}) {\n    const isParentNodeArray = Array.isArray(data);\n    if (isObject(data) || isParentNodeArray) {\n        for (const key in data) {\n            if (Array.isArray(data[key]) ||\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\n                fields[key] = Array.isArray(data[key]) ? [] : {};\n                markFieldsDirty(data[key], fields[key]);\n            }\n            else if (!isNullOrUndefined(data[key])) {\n                fields[key] = true;\n            }\n        }\n    }\n    return fields;\n}\nfunction getDirtyFieldsFromDefaultValues(data, formValues, dirtyFieldsFromValues) {\n    const isParentNodeArray = Array.isArray(data);\n    if (isObject(data) || isParentNodeArray) {\n        for (const key in data) {\n            if (Array.isArray(data[key]) ||\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\n                if (isUndefined(formValues) ||\n                    isPrimitive(dirtyFieldsFromValues[key])) {\n                    dirtyFieldsFromValues[key] = Array.isArray(data[key])\n                        ? markFieldsDirty(data[key], [])\n                        : { ...markFieldsDirty(data[key]) };\n                }\n                else {\n                    getDirtyFieldsFromDefaultValues(data[key], isNullOrUndefined(formValues) ? {} : formValues[key], dirtyFieldsFromValues[key]);\n                }\n            }\n            else {\n                dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\n            }\n        }\n    }\n    return dirtyFieldsFromValues;\n}\nvar getDirtyFields = (defaultValues, formValues) => getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues));\n\nvar getFieldValueAs = (value, { valueAsNumber, valueAsDate, setValueAs }) => isUndefined(value)\n    ? value\n    : valueAsNumber\n        ? value === ''\n            ? NaN\n            : value\n                ? +value\n                : value\n        : valueAsDate && isString(value)\n            ? new Date(value)\n            : setValueAs\n                ? setValueAs(value)\n                : value;\n\nfunction getFieldValue(_f) {\n    const ref = _f.ref;\n    if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n        return;\n    }\n    if (isFileInput(ref)) {\n        return ref.files;\n    }\n    if (isRadioInput(ref)) {\n        return getRadioValue(_f.refs).value;\n    }\n    if (isMultipleSelect(ref)) {\n        return [...ref.selectedOptions].map(({ value }) => value);\n    }\n    if (isCheckBoxInput(ref)) {\n        return getCheckboxValue(_f.refs).value;\n    }\n    return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n\nvar getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {\n    const fields = {};\n    for (const name of fieldsNames) {\n        const field = get(_fields, name);\n        field && set(fields, name, field._f);\n    }\n    return {\n        criteriaMode,\n        names: [...fieldsNames],\n        fields,\n        shouldUseNativeValidation,\n    };\n};\n\nvar getRuleValue = (rule) => isUndefined(rule)\n    ? rule\n    : isRegex(rule)\n        ? rule.source\n        : isObject(rule)\n            ? isRegex(rule.value)\n                ? rule.value.source\n                : rule.value\n            : rule;\n\nvar hasValidation = (options) => options.mount &&\n    (options.required ||\n        options.min ||\n        options.max ||\n        options.maxLength ||\n        options.minLength ||\n        options.pattern ||\n        options.validate);\n\nfunction schemaErrorLookup(errors, _fields, name) {\n    const error = get(errors, name);\n    if (error || isKey(name)) {\n        return {\n            error,\n            name,\n        };\n    }\n    const names = name.split('.');\n    while (names.length) {\n        const fieldName = names.join('.');\n        const field = get(_fields, fieldName);\n        const foundError = get(errors, fieldName);\n        if (field && !Array.isArray(field) && name !== fieldName) {\n            return { name };\n        }\n        if (foundError && foundError.type) {\n            return {\n                name: fieldName,\n                error: foundError,\n            };\n        }\n        names.pop();\n    }\n    return {\n        name,\n    };\n}\n\nvar skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {\n    if (mode.isOnAll) {\n        return false;\n    }\n    else if (!isSubmitted && mode.isOnTouch) {\n        return !(isTouched || isBlurEvent);\n    }\n    else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n        return !isBlurEvent;\n    }\n    else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n        return isBlurEvent;\n    }\n    return true;\n};\n\nvar unsetEmptyArray = (ref, name) => !compact(get(ref, name)).length && unset(ref, name);\n\nconst defaultOptions = {\n    mode: VALIDATION_MODE.onSubmit,\n    reValidateMode: VALIDATION_MODE.onChange,\n    shouldFocusError: true,\n};\nfunction createFormControl(props = {}, flushRootRender) {\n    let _options = {\n        ...defaultOptions,\n        ...props,\n    };\n    let _formState = {\n        submitCount: 0,\n        isDirty: false,\n        isLoading: isFunction(_options.defaultValues),\n        isValidating: false,\n        isSubmitted: false,\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n        isValid: false,\n        touchedFields: {},\n        dirtyFields: {},\n        errors: {},\n    };\n    let _fields = {};\n    let _defaultValues = isObject(_options.defaultValues) || isObject(_options.values)\n        ? cloneObject(_options.defaultValues || _options.values) || {}\n        : {};\n    let _formValues = _options.shouldUnregister\n        ? {}\n        : cloneObject(_defaultValues);\n    let _state = {\n        action: false,\n        mount: false,\n        watch: false,\n    };\n    let _names = {\n        mount: new Set(),\n        unMount: new Set(),\n        array: new Set(),\n        watch: new Set(),\n    };\n    let delayErrorCallback;\n    let timer = 0;\n    const _proxyFormState = {\n        isDirty: false,\n        dirtyFields: false,\n        touchedFields: false,\n        isValidating: false,\n        isValid: false,\n        errors: false,\n    };\n    const _subjects = {\n        values: createSubject(),\n        array: createSubject(),\n        state: createSubject(),\n    };\n    const shouldCaptureDirtyFields = props.resetOptions && props.resetOptions.keepDirtyValues;\n    const validationModeBeforeSubmit = getValidationModes(_options.mode);\n    const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n    const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;\n    const debounce = (callback) => (wait) => {\n        clearTimeout(timer);\n        timer = setTimeout(callback, wait);\n    };\n    const _updateValid = async (shouldUpdateValid) => {\n        if (_proxyFormState.isValid || shouldUpdateValid) {\n            const isValid = _options.resolver\n                ? isEmptyObject((await _executeSchema()).errors)\n                : await executeBuiltInValidation(_fields, true);\n            if (isValid !== _formState.isValid) {\n                _subjects.state.next({\n                    isValid,\n                });\n            }\n        }\n    };\n    const _updateIsValidating = (value) => _proxyFormState.isValidating &&\n        _subjects.state.next({\n            isValidating: value,\n        });\n    const _updateFieldArray = (name, values = [], method, args, shouldSetValues = true, shouldUpdateFieldsAndState = true) => {\n        if (args && method) {\n            _state.action = true;\n            if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {\n                const fieldValues = method(get(_fields, name), args.argA, args.argB);\n                shouldSetValues && set(_fields, name, fieldValues);\n            }\n            if (shouldUpdateFieldsAndState &&\n                Array.isArray(get(_formState.errors, name))) {\n                const errors = method(get(_formState.errors, name), args.argA, args.argB);\n                shouldSetValues && set(_formState.errors, name, errors);\n                unsetEmptyArray(_formState.errors, name);\n            }\n            if (_proxyFormState.touchedFields &&\n                shouldUpdateFieldsAndState &&\n                Array.isArray(get(_formState.touchedFields, name))) {\n                const touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);\n                shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n            }\n            if (_proxyFormState.dirtyFields) {\n                _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n            }\n            _subjects.state.next({\n                name,\n                isDirty: _getDirty(name, values),\n                dirtyFields: _formState.dirtyFields,\n                errors: _formState.errors,\n                isValid: _formState.isValid,\n            });\n        }\n        else {\n            set(_formValues, name, values);\n        }\n    };\n    const updateErrors = (name, error) => {\n        set(_formState.errors, name, error);\n        _subjects.state.next({\n            errors: _formState.errors,\n        });\n    };\n    const updateValidAndValue = (name, shouldSkipSetValueAs, value, ref) => {\n        const field = get(_fields, name);\n        if (field) {\n            const defaultValue = get(_formValues, name, isUndefined(value) ? get(_defaultValues, name) : value);\n            isUndefined(defaultValue) ||\n                (ref && ref.defaultChecked) ||\n                shouldSkipSetValueAs\n                ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f))\n                : setFieldValue(name, defaultValue);\n            _state.mount && _updateValid();\n        }\n    };\n    const updateTouchAndDirty = (name, fieldValue, isBlurEvent, shouldDirty, shouldRender) => {\n        let shouldUpdateField = false;\n        let isPreviousDirty = false;\n        const output = {\n            name,\n        };\n        if (!isBlurEvent || shouldDirty) {\n            if (_proxyFormState.isDirty) {\n                isPreviousDirty = _formState.isDirty;\n                _formState.isDirty = output.isDirty = _getDirty();\n                shouldUpdateField = isPreviousDirty !== output.isDirty;\n            }\n            const isCurrentFieldPristine = deepEqual(get(_defaultValues, name), fieldValue);\n            isPreviousDirty = get(_formState.dirtyFields, name);\n            isCurrentFieldPristine\n                ? unset(_formState.dirtyFields, name)\n                : set(_formState.dirtyFields, name, true);\n            output.dirtyFields = _formState.dirtyFields;\n            shouldUpdateField =\n                shouldUpdateField ||\n                    (_proxyFormState.dirtyFields &&\n                        isPreviousDirty !== !isCurrentFieldPristine);\n        }\n        if (isBlurEvent) {\n            const isPreviousFieldTouched = get(_formState.touchedFields, name);\n            if (!isPreviousFieldTouched) {\n                set(_formState.touchedFields, name, isBlurEvent);\n                output.touchedFields = _formState.touchedFields;\n                shouldUpdateField =\n                    shouldUpdateField ||\n                        (_proxyFormState.touchedFields &&\n                            isPreviousFieldTouched !== isBlurEvent);\n            }\n        }\n        shouldUpdateField && shouldRender && _subjects.state.next(output);\n        return shouldUpdateField ? output : {};\n    };\n    const shouldRenderByError = (name, isValid, error, fieldState) => {\n        const previousFieldError = get(_formState.errors, name);\n        const shouldUpdateValid = _proxyFormState.isValid &&\n            isBoolean(isValid) &&\n            _formState.isValid !== isValid;\n        if (props.delayError && error) {\n            delayErrorCallback = debounce(() => updateErrors(name, error));\n            delayErrorCallback(props.delayError);\n        }\n        else {\n            clearTimeout(timer);\n            delayErrorCallback = null;\n            error\n                ? set(_formState.errors, name, error)\n                : unset(_formState.errors, name);\n        }\n        if ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n            !isEmptyObject(fieldState) ||\n            shouldUpdateValid) {\n            const updatedFormState = {\n                ...fieldState,\n                ...(shouldUpdateValid && isBoolean(isValid) ? { isValid } : {}),\n                errors: _formState.errors,\n                name,\n            };\n            _formState = {\n                ..._formState,\n                ...updatedFormState,\n            };\n            _subjects.state.next(updatedFormState);\n        }\n        _updateIsValidating(false);\n    };\n    const _executeSchema = async (name) => _options.resolver(_formValues, _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation));\n    const executeSchemaAndUpdateState = async (names) => {\n        const { errors } = await _executeSchema();\n        if (names) {\n            for (const name of names) {\n                const error = get(errors, name);\n                error\n                    ? set(_formState.errors, name, error)\n                    : unset(_formState.errors, name);\n            }\n        }\n        else {\n            _formState.errors = errors;\n        }\n        return errors;\n    };\n    const executeBuiltInValidation = async (fields, shouldOnlyCheckValid, context = {\n        valid: true,\n    }) => {\n        for (const name in fields) {\n            const field = fields[name];\n            if (field) {\n                const { _f, ...fieldValue } = field;\n                if (_f) {\n                    const isFieldArrayRoot = _names.array.has(_f.name);\n                    const fieldError = await validateField(field, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation && !shouldOnlyCheckValid, isFieldArrayRoot);\n                    if (fieldError[_f.name]) {\n                        context.valid = false;\n                        if (shouldOnlyCheckValid) {\n                            break;\n                        }\n                    }\n                    !shouldOnlyCheckValid &&\n                        (get(fieldError, _f.name)\n                            ? isFieldArrayRoot\n                                ? updateFieldArrayRootError(_formState.errors, fieldError, _f.name)\n                                : set(_formState.errors, _f.name, fieldError[_f.name])\n                            : unset(_formState.errors, _f.name));\n                }\n                fieldValue &&\n                    (await executeBuiltInValidation(fieldValue, shouldOnlyCheckValid, context));\n            }\n        }\n        return context.valid;\n    };\n    const _removeUnmounted = () => {\n        for (const name of _names.unMount) {\n            const field = get(_fields, name);\n            field &&\n                (field._f.refs\n                    ? field._f.refs.every((ref) => !live(ref))\n                    : !live(field._f.ref)) &&\n                unregister(name);\n        }\n        _names.unMount = new Set();\n    };\n    const _getDirty = (name, data) => (name && data && set(_formValues, name, data),\n        !deepEqual(getValues(), _defaultValues));\n    const _getWatch = (names, defaultValue, isGlobal) => generateWatchOutput(names, _names, {\n        ...(_state.mount\n            ? _formValues\n            : isUndefined(defaultValue)\n                ? _defaultValues\n                : isString(names)\n                    ? { [names]: defaultValue }\n                    : defaultValue),\n    }, isGlobal, defaultValue);\n    const _getFieldArray = (name) => compact(get(_state.mount ? _formValues : _defaultValues, name, props.shouldUnregister ? get(_defaultValues, name, []) : []));\n    const setFieldValue = (name, value, options = {}) => {\n        const field = get(_fields, name);\n        let fieldValue = value;\n        if (field) {\n            const fieldReference = field._f;\n            if (fieldReference) {\n                !fieldReference.disabled &&\n                    set(_formValues, name, getFieldValueAs(value, fieldReference));\n                fieldValue =\n                    isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n                        ? ''\n                        : value;\n                if (isMultipleSelect(fieldReference.ref)) {\n                    [...fieldReference.ref.options].forEach((optionRef) => (optionRef.selected = fieldValue.includes(optionRef.value)));\n                }\n                else if (fieldReference.refs) {\n                    if (isCheckBoxInput(fieldReference.ref)) {\n                        fieldReference.refs.length > 1\n                            ? fieldReference.refs.forEach((checkboxRef) => (!checkboxRef.defaultChecked || !checkboxRef.disabled) &&\n                                (checkboxRef.checked = Array.isArray(fieldValue)\n                                    ? !!fieldValue.find((data) => data === checkboxRef.value)\n                                    : fieldValue === checkboxRef.value))\n                            : fieldReference.refs[0] &&\n                                (fieldReference.refs[0].checked = !!fieldValue);\n                    }\n                    else {\n                        fieldReference.refs.forEach((radioRef) => (radioRef.checked = radioRef.value === fieldValue));\n                    }\n                }\n                else if (isFileInput(fieldReference.ref)) {\n                    fieldReference.ref.value = '';\n                }\n                else {\n                    fieldReference.ref.value = fieldValue;\n                    if (!fieldReference.ref.type) {\n                        _subjects.values.next({\n                            name,\n                            values: { ..._formValues },\n                        });\n                    }\n                }\n            }\n        }\n        (options.shouldDirty || options.shouldTouch) &&\n            updateTouchAndDirty(name, fieldValue, options.shouldTouch, options.shouldDirty, true);\n        options.shouldValidate && trigger(name);\n    };\n    const setValues = (name, value, options) => {\n        for (const fieldKey in value) {\n            const fieldValue = value[fieldKey];\n            const fieldName = `${name}.${fieldKey}`;\n            const field = get(_fields, fieldName);\n            (_names.array.has(name) ||\n                !isPrimitive(fieldValue) ||\n                (field && !field._f)) &&\n                !isDateObject(fieldValue)\n                ? setValues(fieldName, fieldValue, options)\n                : setFieldValue(fieldName, fieldValue, options);\n        }\n    };\n    const setValue = (name, value, options = {}) => {\n        const field = get(_fields, name);\n        const isFieldArray = _names.array.has(name);\n        const cloneValue = cloneObject(value);\n        set(_formValues, name, cloneValue);\n        if (isFieldArray) {\n            _subjects.array.next({\n                name,\n                values: { ..._formValues },\n            });\n            if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n                options.shouldDirty) {\n                _subjects.state.next({\n                    name,\n                    dirtyFields: getDirtyFields(_defaultValues, _formValues),\n                    isDirty: _getDirty(name, cloneValue),\n                });\n            }\n        }\n        else {\n            field && !field._f && !isNullOrUndefined(cloneValue)\n                ? setValues(name, cloneValue, options)\n                : setFieldValue(name, cloneValue, options);\n        }\n        isWatched(name, _names) && _subjects.state.next({ ..._formState });\n        _subjects.values.next({\n            name,\n            values: { ..._formValues },\n        });\n        !_state.mount && flushRootRender();\n    };\n    const onChange = async (event) => {\n        const target = event.target;\n        let name = target.name;\n        let isFieldValueUpdated = true;\n        const field = get(_fields, name);\n        const getCurrentFieldValue = () => target.type ? getFieldValue(field._f) : getEventValue(event);\n        if (field) {\n            let error;\n            let isValid;\n            const fieldValue = getCurrentFieldValue();\n            const isBlurEvent = event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\n            const shouldSkipValidation = (!hasValidation(field._f) &&\n                !_options.resolver &&\n                !get(_formState.errors, name) &&\n                !field._f.deps) ||\n                skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);\n            const watched = isWatched(name, _names, isBlurEvent);\n            set(_formValues, name, fieldValue);\n            if (isBlurEvent) {\n                field._f.onBlur && field._f.onBlur(event);\n                delayErrorCallback && delayErrorCallback(0);\n            }\n            else if (field._f.onChange) {\n                field._f.onChange(event);\n            }\n            const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent, false);\n            const shouldRender = !isEmptyObject(fieldState) || watched;\n            !isBlurEvent &&\n                _subjects.values.next({\n                    name,\n                    type: event.type,\n                    values: { ..._formValues },\n                });\n            if (shouldSkipValidation) {\n                _proxyFormState.isValid && _updateValid();\n                return (shouldRender &&\n                    _subjects.state.next({ name, ...(watched ? {} : fieldState) }));\n            }\n            !isBlurEvent && watched && _subjects.state.next({ ..._formState });\n            _updateIsValidating(true);\n            if (_options.resolver) {\n                const { errors } = await _executeSchema([name]);\n                const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);\n                const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);\n                error = errorLookupResult.error;\n                name = errorLookupResult.name;\n                isValid = isEmptyObject(errors);\n            }\n            else {\n                error = (await validateField(field, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];\n                isFieldValueUpdated =\n                    isNaN(fieldValue) ||\n                        fieldValue === get(_formValues, name, fieldValue);\n                if (isFieldValueUpdated) {\n                    if (error) {\n                        isValid = false;\n                    }\n                    else if (_proxyFormState.isValid) {\n                        isValid = await executeBuiltInValidation(_fields, true);\n                    }\n                }\n            }\n            if (isFieldValueUpdated) {\n                field._f.deps &&\n                    trigger(field._f.deps);\n                shouldRenderByError(name, isValid, error, fieldState);\n            }\n        }\n    };\n    const trigger = async (name, options = {}) => {\n        let isValid;\n        let validationResult;\n        const fieldNames = convertToArrayPayload(name);\n        _updateIsValidating(true);\n        if (_options.resolver) {\n            const errors = await executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);\n            isValid = isEmptyObject(errors);\n            validationResult = name\n                ? !fieldNames.some((name) => get(errors, name))\n                : isValid;\n        }\n        else if (name) {\n            validationResult = (await Promise.all(fieldNames.map(async (fieldName) => {\n                const field = get(_fields, fieldName);\n                return await executeBuiltInValidation(field && field._f ? { [fieldName]: field } : field);\n            }))).every(Boolean);\n            !(!validationResult && !_formState.isValid) && _updateValid();\n        }\n        else {\n            validationResult = isValid = await executeBuiltInValidation(_fields);\n        }\n        _subjects.state.next({\n            ...(!isString(name) ||\n                (_proxyFormState.isValid && isValid !== _formState.isValid)\n                ? {}\n                : { name }),\n            ...(_options.resolver || !name ? { isValid } : {}),\n            errors: _formState.errors,\n            isValidating: false,\n        });\n        options.shouldFocus &&\n            !validationResult &&\n            focusFieldBy(_fields, (key) => key && get(_formState.errors, key), name ? fieldNames : _names.mount);\n        return validationResult;\n    };\n    const getValues = (fieldNames) => {\n        const values = {\n            ..._defaultValues,\n            ...(_state.mount ? _formValues : {}),\n        };\n        return isUndefined(fieldNames)\n            ? values\n            : isString(fieldNames)\n                ? get(values, fieldNames)\n                : fieldNames.map((name) => get(values, name));\n    };\n    const getFieldState = (name, formState) => ({\n        invalid: !!get((formState || _formState).errors, name),\n        isDirty: !!get((formState || _formState).dirtyFields, name),\n        isTouched: !!get((formState || _formState).touchedFields, name),\n        error: get((formState || _formState).errors, name),\n    });\n    const clearErrors = (name) => {\n        name &&\n            convertToArrayPayload(name).forEach((inputName) => unset(_formState.errors, inputName));\n        _subjects.state.next({\n            errors: name ? _formState.errors : {},\n        });\n    };\n    const setError = (name, error, options) => {\n        const ref = (get(_fields, name, { _f: {} })._f || {}).ref;\n        set(_formState.errors, name, {\n            ...error,\n            ref,\n        });\n        _subjects.state.next({\n            name,\n            errors: _formState.errors,\n            isValid: false,\n        });\n        options && options.shouldFocus && ref && ref.focus && ref.focus();\n    };\n    const watch = (name, defaultValue) => isFunction(name)\n        ? _subjects.values.subscribe({\n            next: (payload) => name(_getWatch(undefined, defaultValue), payload),\n        })\n        : _getWatch(name, defaultValue, true);\n    const unregister = (name, options = {}) => {\n        for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n            _names.mount.delete(fieldName);\n            _names.array.delete(fieldName);\n            if (!options.keepValue) {\n                unset(_fields, fieldName);\n                unset(_formValues, fieldName);\n            }\n            !options.keepError && unset(_formState.errors, fieldName);\n            !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n            !options.keepTouched && unset(_formState.touchedFields, fieldName);\n            !_options.shouldUnregister &&\n                !options.keepDefaultValue &&\n                unset(_defaultValues, fieldName);\n        }\n        _subjects.values.next({\n            values: { ..._formValues },\n        });\n        _subjects.state.next({\n            ..._formState,\n            ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n        });\n        !options.keepIsValid && _updateValid();\n    };\n    const register = (name, options = {}) => {\n        let field = get(_fields, name);\n        const disabledIsDefined = isBoolean(options.disabled);\n        set(_fields, name, {\n            ...(field || {}),\n            _f: {\n                ...(field && field._f ? field._f : { ref: { name } }),\n                name,\n                mount: true,\n                ...options,\n            },\n        });\n        _names.mount.add(name);\n        field\n            ? disabledIsDefined &&\n                set(_formValues, name, options.disabled\n                    ? undefined\n                    : get(_formValues, name, getFieldValue(field._f)))\n            : updateValidAndValue(name, true, options.value);\n        return {\n            ...(disabledIsDefined ? { disabled: options.disabled } : {}),\n            ...(_options.shouldUseNativeValidation\n                ? {\n                    required: !!options.required,\n                    min: getRuleValue(options.min),\n                    max: getRuleValue(options.max),\n                    minLength: getRuleValue(options.minLength),\n                    maxLength: getRuleValue(options.maxLength),\n                    pattern: getRuleValue(options.pattern),\n                }\n                : {}),\n            name,\n            onChange,\n            onBlur: onChange,\n            ref: (ref) => {\n                if (ref) {\n                    register(name, options);\n                    field = get(_fields, name);\n                    const fieldRef = isUndefined(ref.value)\n                        ? ref.querySelectorAll\n                            ? ref.querySelectorAll('input,select,textarea')[0] || ref\n                            : ref\n                        : ref;\n                    const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\n                    const refs = field._f.refs || [];\n                    if (radioOrCheckbox\n                        ? refs.find((option) => option === fieldRef)\n                        : fieldRef === field._f.ref) {\n                        return;\n                    }\n                    set(_fields, name, {\n                        _f: {\n                            ...field._f,\n                            ...(radioOrCheckbox\n                                ? {\n                                    refs: [\n                                        ...refs.filter(live),\n                                        fieldRef,\n                                        ...(Array.isArray(get(_defaultValues, name)) ? [{}] : []),\n                                    ],\n                                    ref: { type: fieldRef.type, name },\n                                }\n                                : { ref: fieldRef }),\n                        },\n                    });\n                    updateValidAndValue(name, false, undefined, fieldRef);\n                }\n                else {\n                    field = get(_fields, name, {});\n                    if (field._f) {\n                        field._f.mount = false;\n                    }\n                    (_options.shouldUnregister || options.shouldUnregister) &&\n                        !(isNameInFieldArray(_names.array, name) && _state.action) &&\n                        _names.unMount.add(name);\n                }\n            },\n        };\n    };\n    const _focusError = () => _options.shouldFocusError &&\n        focusFieldBy(_fields, (key) => key && get(_formState.errors, key), _names.mount);\n    const handleSubmit = (onValid, onInvalid) => async (e) => {\n        if (e) {\n            e.preventDefault && e.preventDefault();\n            e.persist && e.persist();\n        }\n        let fieldValues = cloneObject(_formValues);\n        _subjects.state.next({\n            isSubmitting: true,\n        });\n        if (_options.resolver) {\n            const { errors, values } = await _executeSchema();\n            _formState.errors = errors;\n            fieldValues = values;\n        }\n        else {\n            await executeBuiltInValidation(_fields);\n        }\n        unset(_formState.errors, 'root');\n        if (isEmptyObject(_formState.errors)) {\n            _subjects.state.next({\n                errors: {},\n            });\n            await onValid(fieldValues, e);\n        }\n        else {\n            if (onInvalid) {\n                await onInvalid({ ..._formState.errors }, e);\n            }\n            _focusError();\n            setTimeout(_focusError);\n        }\n        _subjects.state.next({\n            isSubmitted: true,\n            isSubmitting: false,\n            isSubmitSuccessful: isEmptyObject(_formState.errors),\n            submitCount: _formState.submitCount + 1,\n            errors: _formState.errors,\n        });\n    };\n    const resetField = (name, options = {}) => {\n        if (get(_fields, name)) {\n            if (isUndefined(options.defaultValue)) {\n                setValue(name, get(_defaultValues, name));\n            }\n            else {\n                setValue(name, options.defaultValue);\n                set(_defaultValues, name, options.defaultValue);\n            }\n            if (!options.keepTouched) {\n                unset(_formState.touchedFields, name);\n            }\n            if (!options.keepDirty) {\n                unset(_formState.dirtyFields, name);\n                _formState.isDirty = options.defaultValue\n                    ? _getDirty(name, get(_defaultValues, name))\n                    : _getDirty();\n            }\n            if (!options.keepError) {\n                unset(_formState.errors, name);\n                _proxyFormState.isValid && _updateValid();\n            }\n            _subjects.state.next({ ..._formState });\n        }\n    };\n    const _reset = (formValues, keepStateOptions = {}) => {\n        const updatedValues = formValues || _defaultValues;\n        const cloneUpdatedValues = cloneObject(updatedValues);\n        const values = formValues && !isEmptyObject(formValues)\n            ? cloneUpdatedValues\n            : _defaultValues;\n        if (!keepStateOptions.keepDefaultValues) {\n            _defaultValues = updatedValues;\n        }\n        if (!keepStateOptions.keepValues) {\n            if (keepStateOptions.keepDirtyValues || shouldCaptureDirtyFields) {\n                for (const fieldName of _names.mount) {\n                    get(_formState.dirtyFields, fieldName)\n                        ? set(values, fieldName, get(_formValues, fieldName))\n                        : setValue(fieldName, get(values, fieldName));\n                }\n            }\n            else {\n                if (isWeb && isUndefined(formValues)) {\n                    for (const name of _names.mount) {\n                        const field = get(_fields, name);\n                        if (field && field._f) {\n                            const fieldReference = Array.isArray(field._f.refs)\n                                ? field._f.refs[0]\n                                : field._f.ref;\n                            if (isHTMLElement(fieldReference)) {\n                                const form = fieldReference.closest('form');\n                                if (form) {\n                                    form.reset();\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n                _fields = {};\n            }\n            _formValues = props.shouldUnregister\n                ? keepStateOptions.keepDefaultValues\n                    ? cloneObject(_defaultValues)\n                    : {}\n                : cloneUpdatedValues;\n            _subjects.array.next({\n                values: { ...values },\n            });\n            _subjects.values.next({\n                values: { ...values },\n            });\n        }\n        _names = {\n            mount: new Set(),\n            unMount: new Set(),\n            array: new Set(),\n            watch: new Set(),\n            watchAll: false,\n            focus: '',\n        };\n        !_state.mount && flushRootRender();\n        _state.mount = !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n        _state.watch = !!props.shouldUnregister;\n        _subjects.state.next({\n            submitCount: keepStateOptions.keepSubmitCount\n                ? _formState.submitCount\n                : 0,\n            isDirty: keepStateOptions.keepDirty\n                ? _formState.isDirty\n                : !!(keepStateOptions.keepDefaultValues &&\n                    !deepEqual(formValues, _defaultValues)),\n            isSubmitted: keepStateOptions.keepIsSubmitted\n                ? _formState.isSubmitted\n                : false,\n            dirtyFields: keepStateOptions.keepDirtyValues\n                ? _formState.dirtyFields\n                : keepStateOptions.keepDefaultValues && formValues\n                    ? getDirtyFields(_defaultValues, formValues)\n                    : {},\n            touchedFields: keepStateOptions.keepTouched\n                ? _formState.touchedFields\n                : {},\n            errors: keepStateOptions.keepErrors ? _formState.errors : {},\n            isSubmitting: false,\n            isSubmitSuccessful: false,\n        });\n    };\n    const reset = (formValues, keepStateOptions) => _reset(isFunction(formValues)\n        ? formValues(_formValues)\n        : formValues, keepStateOptions);\n    const setFocus = (name, options = {}) => {\n        const field = get(_fields, name);\n        const fieldReference = field && field._f;\n        if (fieldReference) {\n            const fieldRef = fieldReference.refs\n                ? fieldReference.refs[0]\n                : fieldReference.ref;\n            if (fieldRef.focus) {\n                fieldRef.focus();\n                options.shouldSelect && fieldRef.select();\n            }\n        }\n    };\n    const _updateFormState = (updatedFormState) => {\n        _formState = {\n            ..._formState,\n            ...updatedFormState,\n        };\n    };\n    const _resetDefaultValues = () => isFunction(_options.defaultValues) &&\n        _options.defaultValues().then((values) => {\n            reset(values, _options.resetOptions);\n            _subjects.state.next({\n                isLoading: false,\n            });\n        });\n    return {\n        control: {\n            register,\n            unregister,\n            getFieldState,\n            _executeSchema,\n            _getWatch,\n            _getDirty,\n            _updateValid,\n            _removeUnmounted,\n            _updateFieldArray,\n            _getFieldArray,\n            _reset,\n            _resetDefaultValues,\n            _updateFormState,\n            _subjects,\n            _proxyFormState,\n            get _fields() {\n                return _fields;\n            },\n            get _formValues() {\n                return _formValues;\n            },\n            get _state() {\n                return _state;\n            },\n            set _state(value) {\n                _state = value;\n            },\n            get _defaultValues() {\n                return _defaultValues;\n            },\n            get _names() {\n                return _names;\n            },\n            set _names(value) {\n                _names = value;\n            },\n            get _formState() {\n                return _formState;\n            },\n            set _formState(value) {\n                _formState = value;\n            },\n            get _options() {\n                return _options;\n            },\n            set _options(value) {\n                _options = {\n                    ..._options,\n                    ...value,\n                };\n            },\n        },\n        trigger,\n        register,\n        handleSubmit,\n        watch,\n        setValue,\n        getValues,\n        reset,\n        resetField,\n        clearErrors,\n        unregister,\n        setError,\n        setFocus,\n        getFieldState,\n    };\n}\n\n/**\n * Custom hook to manage the entire form.\n *\n * @remarks\n * [API](https://react-hook-form.com/api/useform) • [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) • [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)\n *\n * @param props - form configuration and validation parameters.\n *\n * @returns methods - individual functions to manage the form state. {@link UseFormReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, watch, formState: { errors } } = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   console.log(watch(\"example\"));\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input defaultValue=\"test\" {...register(\"example\")} />\n *       <input {...register(\"exampleRequired\", { required: true })} />\n *       {errors.exampleRequired && <span>This field is required</span>}\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useForm(props = {}) {\n    const _formControl = React.useRef();\n    const [formState, updateFormState] = React.useState({\n        isDirty: false,\n        isValidating: false,\n        isLoading: isFunction(props.defaultValues),\n        isSubmitted: false,\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n        isValid: false,\n        submitCount: 0,\n        dirtyFields: {},\n        touchedFields: {},\n        errors: {},\n        defaultValues: isFunction(props.defaultValues)\n            ? undefined\n            : props.defaultValues,\n    });\n    if (!_formControl.current) {\n        _formControl.current = {\n            ...createFormControl(props, () => updateFormState((formState) => ({ ...formState }))),\n            formState,\n        };\n    }\n    const control = _formControl.current.control;\n    control._options = props;\n    useSubscribe({\n        subject: control._subjects.state,\n        next: (value) => {\n            if (shouldRenderFormState(value, control._proxyFormState, control._updateFormState, true)) {\n                updateFormState({ ...control._formState });\n            }\n        },\n    });\n    React.useEffect(() => {\n        if (props.values && !deepEqual(props.values, control._defaultValues)) {\n            control._reset(props.values, control._options.resetOptions);\n        }\n        else {\n            control._resetDefaultValues();\n        }\n    }, [props.values, control]);\n    React.useEffect(() => {\n        if (!control._state.mount) {\n            control._updateValid();\n            control._state.mount = true;\n        }\n        if (control._state.watch) {\n            control._state.watch = false;\n            control._subjects.state.next({ ...control._formState });\n        }\n        control._removeUnmounted();\n    });\n    _formControl.current.formState = getProxyFormState(formState, control);\n    return _formControl.current;\n}\n\nexport { Controller, FormProvider, appendErrors, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };\n//# sourceMappingURL=index.esm.mjs.map\n"],"names":["isCheckBoxInput","element","type","isDateObject","value","Date","isNullOrUndefined","isObjectType","isObject","Array","isArray","getEventValue","event","target","checked","isNameInFieldArray","names","name","has","substring","search","getNodeParentName","isPlainObject","tempObject","prototypeCopy","constructor","prototype","hasOwnProperty","isWeb","window","HTMLElement","document","cloneObject","data","copy","Set","Blob","FileList","key","compact","filter","Boolean","isUndefined","val","undefined","get","obj","path","defaultValue","result","split","reduce","EVENTS","BLUR","FOCUS_OUT","CHANGE","VALIDATION_MODE","onBlur","onChange","onSubmit","onTouched","all","INPUT_VALIDATION_RULES","HookFormContext","useFormContext","FormProvider","props","children","Provider","getProxyFormState","formState","control","localProxyFormState","isRoot","defaultValues","_defaultValues","Object","defineProperty","_key","_proxyFormState","isEmptyObject","keys","length","shouldRenderFormState","formStateData","updateFormState","find","convertToArrayPayload","shouldSubscribeByName","signalName","exact","some","currentName","startsWith","useSubscribe","_props","current","subscription","disabled","subject","subscribe","next","unsubscribe","useFormState","methods","_formState","_mounted","_localProxyFormState","isDirty","isLoading","dirtyFields","touchedFields","isValidating","isValid","errors","_name","_updateFormState","_subjects","state","_updateValid","isString","generateWatchOutput","_names","formValues","isGlobal","watch","add","map","fieldName","watchAll","useWatch","values","updateValue","_formValues","_getWatch","_removeUnmounted","isKey","test","stringToPath","input","replace","set","object","index","tempPath","lastIndex","newValue","objValue","isNaN","useController","shouldUnregister","isArrayField","array","_registerProps","register","rules","_shouldUnregisterField","_options","updateMounted","field","_fields","_f","mount","_state","action","unregister","ref","elm","focus","select","setCustomValidity","message","reportValidity","fieldState","defineProperties","invalid","enumerable","isTouched","error","Controller","render","appendErrors","validateAllFieldCriteria","types","focusFieldBy","fields","callback","fieldsNames","currentField","refs","generateId","d","performance","now","c","r","Math","random","toString","getFocusFieldName","options","shouldFocus","focusName","focusIndex","getValidationModes","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","isWatched","isBlurEvent","watchName","slice","updateFieldArrayRootError","fieldArrayErrors","isBoolean","isFileInput","isFunction","isHTMLElement","owner","ownerDocument","defaultView","isMessage","isRadioInput","isRegex","RegExp","defaultResult","validResult","getCheckboxValue","option","attributes","defaultReturn","getRadioValue","previous","getValidateError","every","getValueAndMessage","validationData","validateField","async","shouldUseNativeValidation","isFieldArray","required","maxLength","minLength","min","max","pattern","validate","valueAsNumber","inputValue","inputRef","isRadio","isCheckBox","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","exceedMin","maxOutput","minOutput","valueDate","valueAsDate","convertTimeToDate","time","toDateString","isTime","isWeek","valueNumber","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","append","fillEmptyArray","insert","moveArrayAt","from","to","splice","prepend","removeArrayAt","indexes","i","temp","removeAtIndexes","sort","a","b","swapArrayAt","indexA","indexB","unset","paths","childObject","updatePath","baseGet","isEmptyArray","updateAt","fieldValues","useFieldArray","keyName","setFields","_getFieldArray","ids","_fieldIds","_actioned","fieldArrayName","updateValues","updatedFieldArrayValues","_updateFieldArray","isSubmitted","resolver","_executeSchema","then","existingError","criteriaMode","swap","argA","argB","move","prependValue","appendValue","remove","insertValue","update","item","createSubject","_observers","observers","observer","push","o","isPrimitive","deepEqual","object1","object2","getTime","keys1","keys2","val1","includes","val2","isMultipleSelect","live","isConnected","objectHasFunction","markFieldsDirty","isParentNodeArray","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","getDirtyFields","getFieldValueAs","setValueAs","NaN","getFieldValue","files","selectedOptions","getResolverOptions","getRuleValue","rule","source","hasValidation","schemaErrorLookup","join","foundError","pop","skipValidation","reValidateMode","unsetEmptyArray","defaultOptions","shouldFocusError","createFormControl","flushRootRender","delayErrorCallback","submitCount","isSubmitting","isSubmitSuccessful","unMount","timer","shouldCaptureDirtyFields","resetOptions","keepDirtyValues","validationModeBeforeSubmit","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","shouldUpdateValid","executeBuiltInValidation","_updateIsValidating","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","shouldDirty","shouldRender","shouldUpdateField","isPreviousDirty","output","_getDirty","isCurrentFieldPristine","isPreviousFieldTouched","context","shouldOnlyCheckValid","valid","isFieldArrayRoot","fieldError","getValues","fieldReference","forEach","optionRef","selected","checkboxRef","radioRef","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","cloneValue","isFieldValueUpdated","shouldSkipValidation","deps","watched","previousErrorLookupResult","errorLookupResult","previousFieldError","delayError","updateErrors","wait","clearTimeout","setTimeout","updatedFormState","shouldRenderByError","fieldNames","executeSchemaAndUpdateState","Promise","getFieldState","delete","keepValue","keepError","keepDirty","keepTouched","keepDefaultValue","keepIsValid","disabledIsDefined","fieldRef","querySelectorAll","radioOrCheckbox","_focusError","_reset","keepStateOptions","updatedValues","cloneUpdatedValues","keepDefaultValues","keepValues","form","closest","reset","keepSubmitCount","keepIsSubmitted","keepErrors","method","args","shouldSetValues","shouldUpdateFieldsAndState","_resetDefaultValues","handleSubmit","onValid","onInvalid","e","preventDefault","persist","payload","resetField","clearErrors","inputName","setError","setFocus","shouldSelect","useForm","_formControl"],"sourceRoot":""}